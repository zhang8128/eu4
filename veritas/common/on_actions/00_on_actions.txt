# country
#Province IDs changed
on_startup = {
	if = {
		limit = { NOT = { has_global_flag = veritas_et_fortitudo }}
		set_global_flag = VeF_3.7.3
		set_global_flag = veritas_et_fortitudo # Identify the mod for sub-mods
	
		# Set the Hansa Leader
		LUB = { save_global_event_target_as = hansa_leader_tag }
			
		#Set up Greenland without RNW
		if = {
			limit = { 
				is_random_new_world = no
				2 = { is_empty = yes }
				NOT = { is_year = 1410 }
			}
			if = {
				limit = { has_global_flag = gob_active }
				2 = {
					cede_province = ICE
					change_trade_goods = livestock
				}
			}
			else = {
				2 = {
					cede_province = NOR
					change_trade_goods = livestock
				}
			}
		}
	
		#Initialise Barbary Pirates		
		if = {
			limit = { NOT = { has_dlc = "Mare Nostrum" } }	
			REB = { country_event = { id = vef_barbarossa.1 days = 1 }}
		}
		#Set Flag Empty Provinces
		every_province = {
			limit = { OR = {  NOT = { is_city = yes } owner = { government = native }}}
			set_province_flag = libbuild_initialise
			export_to_variable = { variable_name = vef_prov_culture value = culture }
			export_to_variable = { variable_name = vef_prov_religion value = religion }
			export_to_variable = { variable_name = vef_prov_desire value = modifier:province_trade_power_value }
		}
		set_country_flag = initialization_complete
		random_country = {
			limit = { has_heir = no }
			export_to_variable = { which = vef_year value = heir_age }
			change_variable = { which = vef_year value = 1 }
			every_country = { set_variable = { which = vef_year which = PREV }}
		}
		every_country = {
			if = {
				limit = { has_country_flag = starting_vassal }
				overlord = { set_country_flag = overlord_flag_@PREV }
			}

			# Initialize Variables
			set_variable = { which = national_stability value = 300 }
			export_to_variable = { which = previous_count value = num_of_cities }
			export_to_variable = { which = province_count value = num_of_cities }
			if = {
				limit = { NOT = { has_country_flag = vef_salic_law }}
				set_country_flag = vef_malepref_primo
			}
			set_variable = { which = queen_age value = 1100 }
			if = {
				limit = {
					has_dlc = "Rights of Man"
					has_country_flag = vef_queen
				}
				clr_country_flag = vef_queen
			}
			else_if = {
				limit = {
					NOT = { has_dlc = "Rights of Man" }
					has_country_flag = vef_queen
				}
				export_to_variable = { which = queen_age value = monarch_age }
				multiply_variable = { which = queen_age value = 12 }
			}
			subtract_variable = { which = male_gen0_1_age which = vef_year }
			multiply_variable = { which = male_gen0_1_age value = -12 }
			subtract_variable = { which = male_gen0_2_age which = vef_year }
			multiply_variable = { which = male_gen0_2_age value = -12 }
			subtract_variable = { which = male_gen0_3_age which = vef_year }
			multiply_variable = { which = male_gen0_3_age value = -12 }
			subtract_variable = { which = male_gen0_4_age which = vef_year }
			multiply_variable = { which = male_gen0_4_age value = -12 }
			subtract_variable = { which = female_gen0_1_age which = vef_year }
			multiply_variable = { which = female_gen0_1_age value = -12 }
			subtract_variable = { which = female_gen0_2_age which = vef_year }
			multiply_variable = { which = female_gen0_2_age value = -12 }
			subtract_variable = { which = female_gen0_3_age which = vef_year }
			multiply_variable = { which = female_gen0_3_age value = -12 }
			subtract_variable = { which = female_gen0_4_age which = vef_year }
			multiply_variable = { which = female_gen0_4_age value = -12 }
			subtract_variable = { which = male_gen1_1_age which = vef_year }
			multiply_variable = { which = male_gen1_1_age value = -12 }
			subtract_variable = { which = male_gen1_2_age which = vef_year }
			multiply_variable = { which = male_gen1_2_age value = -12 }
			subtract_variable = { which = male_gen1_3_age which = vef_year }
			multiply_variable = { which = male_gen1_3_age value = -12 }
			subtract_variable = { which = male_gen1_4_age which = vef_year }
			multiply_variable = { which = male_gen1_4_age value = -12 }
			subtract_variable = { which = female_gen1_1_age which = vef_year }
			multiply_variable = { which = female_gen1_1_age value = -12 }
			subtract_variable = { which = female_gen1_2_age which = vef_year }
			multiply_variable = { which = female_gen1_2_age value = -12 }
			subtract_variable = { which = female_gen1_3_age which = vef_year }
			multiply_variable = { which = female_gen1_3_age value = -12 }
			subtract_variable = { which = female_gen1_4_age which = vef_year }
			multiply_variable = { which = female_gen1_4_age value = -12 }
			subtract_variable = { which = male_gen1_1m1_age which = vef_year }
			multiply_variable = { which = male_gen1_1m1_age value = -12 }
			subtract_variable = { which = male_gen1_1m2_age which = vef_year }
			multiply_variable = { which = male_gen1_1m2_age value = -12 }
			subtract_variable = { which = male_gen1_1m3_age which = vef_year }
			multiply_variable = { which = male_gen1_1m3_age value = -12 }
			subtract_variable = { which = male_gen1_1m4_age which = vef_year }
			multiply_variable = { which = male_gen1_1m4_age value = -12 }
			subtract_variable = { which = female_gen1_1m1_age which = vef_year }
			multiply_variable = { which = female_gen1_1m1_age value = -12 }
			subtract_variable = { which = female_gen1_1m2_age which = vef_year }
			multiply_variable = { which = female_gen1_1m2_age value = -12 }
			subtract_variable = { which = female_gen1_1m3_age which = vef_year }
			multiply_variable = { which = female_gen1_1m3_age value = -12 }
			subtract_variable = { which = female_gen1_1m4_age which = vef_year }
			multiply_variable = { which = female_gen1_1m4_age value = -12 }
			subtract_variable = { which = male_gen1_2m1_age which = vef_year }
			multiply_variable = { which = male_gen1_2m1_age value = -12 }
			subtract_variable = { which = male_gen1_2m2_age which = vef_year }
			multiply_variable = { which = male_gen1_2m2_age value = -12 }
			subtract_variable = { which = male_gen1_2m3_age which = vef_year }
			multiply_variable = { which = male_gen1_2m3_age value = -12 }
			subtract_variable = { which = male_gen1_2m4_age which = vef_year }
			multiply_variable = { which = male_gen1_2m4_age value = -12 }
			subtract_variable = { which = female_gen1_2m1_age which = vef_year }
			multiply_variable = { which = female_gen1_2m1_age value = -12 }
			subtract_variable = { which = female_gen1_2m2_age which = vef_year }
			multiply_variable = { which = female_gen1_2m2_age value = -12 }
			subtract_variable = { which = female_gen1_2m3_age which = vef_year }
			multiply_variable = { which = female_gen1_2m3_age value = -12 }
			subtract_variable = { which = female_gen1_2m4_age which = vef_year }
			multiply_variable = { which = female_gen1_2m4_age value = -12 }
			subtract_variable = { which = male_gen1_3m1_age which = vef_year }
			multiply_variable = { which = male_gen1_3m1_age value = -12 }
			subtract_variable = { which = male_gen1_3m2_age which = vef_year }
			multiply_variable = { which = male_gen1_3m2_age value = -12 }
			subtract_variable = { which = male_gen1_3m3_age which = vef_year }
			multiply_variable = { which = male_gen1_3m3_age value = -12 }
			subtract_variable = { which = male_gen1_3m4_age which = vef_year }
			multiply_variable = { which = male_gen1_3m4_age value = -12 }
			subtract_variable = { which = female_gen1_3m1_age which = vef_year }
			multiply_variable = { which = female_gen1_3m1_age value = -12 }
			subtract_variable = { which = female_gen1_3m2_age which = vef_year }
			multiply_variable = { which = female_gen1_3m2_age value = -12 }
			subtract_variable = { which = female_gen1_3m3_age which = vef_year }
			multiply_variable = { which = female_gen1_3m3_age value = -12 }
			subtract_variable = { which = female_gen1_3m4_age which = vef_year }
			multiply_variable = { which = female_gen1_3m4_age value = -12 }
			subtract_variable = { which = male_gen1_4m1_age which = vef_year }
			multiply_variable = { which = male_gen1_4m1_age value = -12 }
			subtract_variable = { which = male_gen1_4m2_age which = vef_year }
			multiply_variable = { which = male_gen1_4m2_age value = -12 }
			subtract_variable = { which = male_gen1_4m3_age which = vef_year }
			multiply_variable = { which = male_gen1_4m3_age value = -12 }
			subtract_variable = { which = male_gen1_4m4_age which = vef_year }
			multiply_variable = { which = male_gen1_4m4_age value = -12 }
			subtract_variable = { which = female_gen1_4m1_age which = vef_year }
			multiply_variable = { which = female_gen1_4m1_age value = -12 }
			subtract_variable = { which = female_gen1_4m2_age which = vef_year }
			multiply_variable = { which = female_gen1_4m2_age value = -12 }
			subtract_variable = { which = female_gen1_4m3_age which = vef_year }
			multiply_variable = { which = female_gen1_4m3_age value = -12 }
			subtract_variable = { which = female_gen1_4m4_age which = vef_year }
			multiply_variable = { which = female_gen1_4m4_age value = -12 }
			subtract_variable = { which = male_gen1_1f1_age which = vef_year }
			multiply_variable = { which = male_gen1_1f1_age value = -12 }
			subtract_variable = { which = male_gen1_1f2_age which = vef_year }
			multiply_variable = { which = male_gen1_1f2_age value = -12 }
			subtract_variable = { which = male_gen1_1f3_age which = vef_year }
			multiply_variable = { which = male_gen1_1f3_age value = -12 }
			subtract_variable = { which = male_gen1_1f4_age which = vef_year }
			multiply_variable = { which = male_gen1_1f4_age value = -12 }
			subtract_variable = { which = female_gen1_1f1_age which = vef_year }
			multiply_variable = { which = female_gen1_1f1_age value = -12 }
			subtract_variable = { which = female_gen1_1f2_age which = vef_year }
			multiply_variable = { which = female_gen1_1f2_age value = -12 }
			subtract_variable = { which = female_gen1_1f3_age which = vef_year }
			multiply_variable = { which = female_gen1_1f3_age value = -12 }
			subtract_variable = { which = female_gen1_1f4_age which = vef_year }
			multiply_variable = { which = female_gen1_1f4_age value = -12 }
			subtract_variable = { which = male_gen1_2f1_age which = vef_year }
			multiply_variable = { which = male_gen1_2f1_age value = -12 }
			subtract_variable = { which = male_gen1_2f2_age which = vef_year }
			multiply_variable = { which = male_gen1_2f2_age value = -12 }
			subtract_variable = { which = male_gen1_2f3_age which = vef_year }
			multiply_variable = { which = male_gen1_2f3_age value = -12 }
			subtract_variable = { which = male_gen1_2f4_age which = vef_year }
			multiply_variable = { which = male_gen1_2f4_age value = -12 }
			subtract_variable = { which = female_gen1_2f1_age which = vef_year }
			multiply_variable = { which = female_gen1_2f1_age value = -12 }
			subtract_variable = { which = female_gen1_2f2_age which = vef_year }
			multiply_variable = { which = female_gen1_2f2_age value = -12 }
			subtract_variable = { which = female_gen1_2f3_age which = vef_year }
			multiply_variable = { which = female_gen1_2f3_age value = -12 }
			subtract_variable = { which = female_gen1_2f4_age which = vef_year }
			multiply_variable = { which = female_gen1_2f4_age value = -12 }
			subtract_variable = { which = male_gen1_3f1_age which = vef_year }
			multiply_variable = { which = male_gen1_3f1_age value = -12 }
			subtract_variable = { which = male_gen1_3f2_age which = vef_year }
			multiply_variable = { which = male_gen1_3f2_age value = -12 }
			subtract_variable = { which = male_gen1_3f3_age which = vef_year }
			multiply_variable = { which = male_gen1_3f3_age value = -12 }
			subtract_variable = { which = male_gen1_3f4_age which = vef_year }
			multiply_variable = { which = male_gen1_3f4_age value = -12 }
			subtract_variable = { which = female_gen1_3f1_age which = vef_year }
			multiply_variable = { which = female_gen1_3f1_age value = -12 }
			subtract_variable = { which = female_gen1_3f2_age which = vef_year }
			multiply_variable = { which = female_gen1_3f2_age value = -12 }
			subtract_variable = { which = female_gen1_3f3_age which = vef_year }
			multiply_variable = { which = female_gen1_3f3_age value = -12 }
			subtract_variable = { which = female_gen1_3f4_age which = vef_year }
			multiply_variable = { which = female_gen1_3f4_age value = -12 }
			subtract_variable = { which = male_gen1_4f1_age which = vef_year }
			multiply_variable = { which = male_gen1_4f1_age value = -12 }
			subtract_variable = { which = male_gen1_4f2_age which = vef_year }
			multiply_variable = { which = male_gen1_4f2_age value = -12 }
			subtract_variable = { which = male_gen1_4f3_age which = vef_year }
			multiply_variable = { which = male_gen1_4f3_age value = -12 }
			subtract_variable = { which = male_gen1_4f4_age which = vef_year }
			multiply_variable = { which = male_gen1_4f4_age value = -12 }
			subtract_variable = { which = female_gen1_4f1_age which = vef_year }
			multiply_variable = { which = female_gen1_4f1_age value = -12 }
			subtract_variable = { which = female_gen1_4f2_age which = vef_year }
			multiply_variable = { which = female_gen1_4f2_age value = -12 }
			subtract_variable = { which = female_gen1_4f3_age which = vef_year }
			multiply_variable = { which = female_gen1_4f3_age value = -12 }
			subtract_variable = { which = female_gen1_4f4_age which = vef_year }
			multiply_variable = { which = female_gen1_4f4_age value = -12 }
			subtract_variable = { which = male_gen2_1m1_age which = vef_year }
			multiply_variable = { which = male_gen2_1m1_age value = -12 }
			subtract_variable = { which = male_gen2_1m2_age which = vef_year }
			multiply_variable = { which = male_gen2_1m2_age value = -12 }
			subtract_variable = { which = male_gen2_1m3_age which = vef_year }
			multiply_variable = { which = male_gen2_1m3_age value = -12 }
			subtract_variable = { which = male_gen2_1m4_age which = vef_year }
			multiply_variable = { which = male_gen2_1m4_age value = -12 }
			subtract_variable = { which = female_gen2_1m1_age which = vef_year }
			multiply_variable = { which = female_gen2_1m1_age value = -12 }
			subtract_variable = { which = female_gen2_1m2_age which = vef_year }
			multiply_variable = { which = female_gen2_1m2_age value = -12 }
			subtract_variable = { which = female_gen2_1m3_age which = vef_year }
			multiply_variable = { which = female_gen2_1m3_age value = -12 }
			subtract_variable = { which = female_gen2_1m4_age which = vef_year }
			multiply_variable = { which = female_gen2_1m4_age value = -12 }
			subtract_variable = { which = male_gen2_2m1_age which = vef_year }
			multiply_variable = { which = male_gen2_2m1_age value = -12 }
			subtract_variable = { which = male_gen2_2m2_age which = vef_year }
			multiply_variable = { which = male_gen2_2m2_age value = -12 }
			subtract_variable = { which = male_gen2_2m3_age which = vef_year }
			multiply_variable = { which = male_gen2_2m3_age value = -12 }
			subtract_variable = { which = male_gen2_2m4_age which = vef_year }
			multiply_variable = { which = male_gen2_2m4_age value = -12 }
			subtract_variable = { which = female_gen2_2m1_age which = vef_year }
			multiply_variable = { which = female_gen2_2m1_age value = -12 }
			subtract_variable = { which = female_gen2_2m2_age which = vef_year }
			multiply_variable = { which = female_gen2_2m2_age value = -12 }
			subtract_variable = { which = female_gen2_2m3_age which = vef_year }
			multiply_variable = { which = female_gen2_2m3_age value = -12 }
			subtract_variable = { which = female_gen2_2m4_age which = vef_year }
			multiply_variable = { which = female_gen2_2m4_age value = -12 }
			subtract_variable = { which = male_gen2_3m1_age which = vef_year }
			multiply_variable = { which = male_gen2_3m1_age value = -12 }
			subtract_variable = { which = male_gen2_3m2_age which = vef_year }
			multiply_variable = { which = male_gen2_3m2_age value = -12 }
			subtract_variable = { which = male_gen2_3m3_age which = vef_year }
			multiply_variable = { which = male_gen2_3m3_age value = -12 }
			subtract_variable = { which = male_gen2_3m4_age which = vef_year }
			multiply_variable = { which = male_gen2_3m4_age value = -12 }
			subtract_variable = { which = female_gen2_3m1_age which = vef_year }
			multiply_variable = { which = female_gen2_3m1_age value = -12 }
			subtract_variable = { which = female_gen2_3m2_age which = vef_year }
			multiply_variable = { which = female_gen2_3m2_age value = -12 }
			subtract_variable = { which = female_gen2_3m3_age which = vef_year }
			multiply_variable = { which = female_gen2_3m3_age value = -12 }
			subtract_variable = { which = female_gen2_3m4_age which = vef_year }
			multiply_variable = { which = female_gen2_3m4_age value = -12 }
			subtract_variable = { which = male_gen2_4m1_age which = vef_year }
			multiply_variable = { which = male_gen2_4m1_age value = -12 }
			subtract_variable = { which = male_gen2_4m2_age which = vef_year }
			multiply_variable = { which = male_gen2_4m2_age value = -12 }
			subtract_variable = { which = male_gen2_4m3_age which = vef_year }
			multiply_variable = { which = male_gen2_4m3_age value = -12 }
			subtract_variable = { which = male_gen2_4m4_age which = vef_year }
			multiply_variable = { which = male_gen2_4m4_age value = -12 }
			subtract_variable = { which = female_gen2_4m1_age which = vef_year }
			multiply_variable = { which = female_gen2_4m1_age value = -12 }
			subtract_variable = { which = female_gen2_4m2_age which = vef_year }
			multiply_variable = { which = female_gen2_4m2_age value = -12 }
			subtract_variable = { which = female_gen2_4m3_age which = vef_year }
			multiply_variable = { which = female_gen2_4m3_age value = -12 }
			subtract_variable = { which = female_gen2_4m4_age which = vef_year }
			multiply_variable = { which = female_gen2_4m4_age value = -12 }
			subtract_variable = { which = male_gen2_1f1_age which = vef_year }
			multiply_variable = { which = male_gen2_1f1_age value = -12 }
			subtract_variable = { which = male_gen2_1f2_age which = vef_year }
			multiply_variable = { which = male_gen2_1f2_age value = -12 }
			subtract_variable = { which = male_gen2_1f3_age which = vef_year }
			multiply_variable = { which = male_gen2_1f3_age value = -12 }
			subtract_variable = { which = male_gen2_1f4_age which = vef_year }
			multiply_variable = { which = male_gen2_1f4_age value = -12 }
			subtract_variable = { which = female_gen2_1f1_age which = vef_year }
			multiply_variable = { which = female_gen2_1f1_age value = -12 }
			subtract_variable = { which = female_gen2_1f2_age which = vef_year }
			multiply_variable = { which = female_gen2_1f2_age value = -12 }
			subtract_variable = { which = female_gen2_1f3_age which = vef_year }
			multiply_variable = { which = female_gen2_1f3_age value = -12 }
			subtract_variable = { which = female_gen2_1f4_age which = vef_year }
			multiply_variable = { which = female_gen2_1f4_age value = -12 }
			subtract_variable = { which = male_gen2_2f1_age which = vef_year }
			multiply_variable = { which = male_gen2_2f1_age value = -12 }
			subtract_variable = { which = male_gen2_2f2_age which = vef_year }
			multiply_variable = { which = male_gen2_2f2_age value = -12 }
			subtract_variable = { which = male_gen2_2f3_age which = vef_year }
			multiply_variable = { which = male_gen2_2f3_age value = -12 }
			subtract_variable = { which = male_gen2_2f4_age which = vef_year }
			multiply_variable = { which = male_gen2_2f4_age value = -12 }
			subtract_variable = { which = female_gen2_2f1_age which = vef_year }
			multiply_variable = { which = female_gen2_2f1_age value = -12 }
			subtract_variable = { which = female_gen2_2f2_age which = vef_year }
			multiply_variable = { which = female_gen2_2f2_age value = -12 }
			subtract_variable = { which = female_gen2_2f3_age which = vef_year }
			multiply_variable = { which = female_gen2_2f3_age value = -12 }
			subtract_variable = { which = female_gen2_2f4_age which = vef_year }
			multiply_variable = { which = female_gen2_2f4_age value = -12 }
			subtract_variable = { which = male_gen2_3f1_age which = vef_year }
			multiply_variable = { which = male_gen2_3f1_age value = -12 }
			subtract_variable = { which = male_gen2_3f2_age which = vef_year }
			multiply_variable = { which = male_gen2_3f2_age value = -12 }
			subtract_variable = { which = male_gen2_3f3_age which = vef_year }
			multiply_variable = { which = male_gen2_3f3_age value = -12 }
			subtract_variable = { which = male_gen2_3f4_age which = vef_year }
			multiply_variable = { which = male_gen2_3f4_age value = -12 }
			subtract_variable = { which = female_gen2_3f1_age which = vef_year }
			multiply_variable = { which = female_gen2_3f1_age value = -12 }
			subtract_variable = { which = female_gen2_3f2_age which = vef_year }
			multiply_variable = { which = female_gen2_3f2_age value = -12 }
			subtract_variable = { which = female_gen2_3f3_age which = vef_year }
			multiply_variable = { which = female_gen2_3f3_age value = -12 }
			subtract_variable = { which = female_gen2_3f4_age which = vef_year }
			multiply_variable = { which = female_gen2_3f4_age value = -12 }
			subtract_variable = { which = male_gen2_4f1_age which = vef_year }
			multiply_variable = { which = male_gen2_4f1_age value = -12 }
			subtract_variable = { which = male_gen2_4f2_age which = vef_year }
			multiply_variable = { which = male_gen2_4f2_age value = -12 }
			subtract_variable = { which = male_gen2_4f3_age which = vef_year }
			multiply_variable = { which = male_gen2_4f3_age value = -12 }
			subtract_variable = { which = male_gen2_4f4_age which = vef_year }
			multiply_variable = { which = male_gen2_4f4_age value = -12 }
			subtract_variable = { which = female_gen2_4f1_age which = vef_year }
			multiply_variable = { which = female_gen2_4f1_age value = -12 }
			subtract_variable = { which = female_gen2_4f2_age which = vef_year }
			multiply_variable = { which = female_gen2_4f2_age value = -12 }
			subtract_variable = { which = female_gen2_4f3_age which = vef_year }
			multiply_variable = { which = female_gen2_4f3_age value = -12 }
			subtract_variable = { which = female_gen2_4f4_age which = vef_year }
			multiply_variable = { which = female_gen2_4f4_age value = -12 }
			subtract_variable = { which = male_illeg_1_age which = vef_year }
			multiply_variable = { which = male_illeg_1_age value = -12 }
			subtract_variable = { which = male_illeg_2_age which = vef_year }
			multiply_variable = { which = male_illeg_2_age value = -12 }
			subtract_variable = { which = male_illeg_3_age which = vef_year }
			multiply_variable = { which = male_illeg_3_age value = -12 }
			subtract_variable = { which = male_illeg_4_age which = vef_year }
			multiply_variable = { which = male_illeg_4_age value = -12 }
			subtract_variable = { which = female_illeg_1_age which = vef_year }
			multiply_variable = { which = female_illeg_1_age value = -12 }
			subtract_variable = { which = female_illeg_2_age which = vef_year }
			multiply_variable = { which = female_illeg_2_age value = -12 }
			subtract_variable = { which = female_illeg_3_age which = vef_year }
			multiply_variable = { which = female_illeg_3_age value = -12 }
			subtract_variable = { which = female_illeg_4_age which = vef_year }
			multiply_variable = { which = female_illeg_4_age value = -12 }
			set_variable = { which = ruler_military_prowess value = 0 }
			set_variable = { which = heir_military_prowess value = 0 }
			if = {
				limit = {
					has_heir = yes
					NOT = { has_heir = "Cadet Branch" }
					NOT = { has_heir = "Heir Apparent" }
				}
				set_variable = { which = vef_heir_gen value = 1 }
				if = {
					limit = { has_female_heir = no }
					export_to_variable = { which = male_gen1_1_age value = heir_age }
					set_variable = { which = male_gen1_1_display which = male_gen1_1_age }
					multiply_variable = { which = male_gen1_1_age value = 12 }
					set_country_flag = male_gen1_1_heir
				}
				if = {
					limit = { has_female_heir = yes }
					export_to_variable = { which = female_gen1_1_age value = heir_age }
					set_variable = { which = female_gen1_1_display which = female_gen1_1_age }
					multiply_variable = { which = female_gen1_1_age value = 12 }
					set_country_flag = female_gen1_1_heir
				}
			}
			if = {
				limit = { NOT = { has_country_flag = vassal_boost_set } }
				set_variable = { which = vassal_boost value = 0 }	
				set_country_flag = vassal_boost_set
			}
			if = {
				limit = { is_subject = yes }
				export_to_variable = { which = prevvassal_prov value = num_of_cities }
			}
		
			#Setup Hansa Opinions
			if = {
				limit = { has_country_modifier = hanseatic_league_member }
				every_country = {
					limit = { has_country_modifier = hanseatic_league_member }
					add_opinion = { who = PREV modifier = hanseatic_league_friendship }
				}
			}
			country_event = { id = vef_newgov.1 }     # Set initial government values
			country_event = { id = vef_newgov.2 }	  # Initial Caluclations
			country_event = { id = vef_libbuild.1 }	  # Set initial buildings
			country_event = { id = vef_newgov.90000 } # Initial Calculations
			country_event = { id = vef_autonomy.2 }	  # Province Layers
			
			if = {
				limit = { tag = YUN }
				every_owned_province = {
					if = {
						limit = { has_province_flag = autonomy_group_five }
						set_local_autonomy = 85
					}
					else_if = {
						limit = { has_province_flag = autonomy_group_four }
						set_local_autonomy = 50
					}
					else_if = {
						limit = { has_province_flag = autonomy_group_three }
						set_local_autonomy = 25
					}
				}
			}
			every_owned_province = {
				if = {
					limit = { NOT = { is_core = PREV }}
					cede_province = XXX
					set_province_flag = non_core_@PREV
				}
				else_if = {
					limit = { is_territorial_core = PREV }
					cede_province = XXX
					set_province_flag = terr_core_@PREV
				}
			}
			every_province = {
				if = {
					limit = { has_province_flag = non_core_@PREV }
					cede_province = PREV
					add_nationalism = 20
				}
				else_if = {
					limit = { has_province_flag = terr_core_@PREV }
					cede_province = PREV
					add_territorial_core = PREV
				}
			}	
			every_owned_province = {
				limit = {
					OR = {
						continent = europe
						region = maghreb_region
						region = egypt_region
						region = mashriq_region
						region = khorasan_region
						region = arabia_region
						region = persia_region
						region = japan_region
						region = north_china_region
						region = south_china_region
						region = xinan_region
						region = korea_region		
						development = 10
						has_influencing_fort = yes
					}
					NOT = { has_building = basic_fort }
					NOT = { has_province_modifier = dessert_oasis }
					OR = {
						NOT = { province_group = ireland_group }
						has_influencing_fort = yes
					}
					NOT = { province_id = 18 }
				}
				set_province_flag = starting_fort
				if = {
					limit = { has_influencing_fort = no }
					add_building = basic_fort
				}
			}
			
			# Ruler Trait for initial ruler
			if = {
				limit = {
					NOT = { has_dlc = "Rights of Man" }
					NOT = { has_regency_trigger = yes }
				}
				random_list = {
					7 = { add_ruler_modifier = { name = ruler_trait_pious } }
					6 = { add_ruler_modifier = { name = ruler_trait_builder } }
					7 = { add_ruler_modifier = { name = ruler_trait_patron } }
					6 = { add_ruler_modifier = { name = ruler_trait_extravagent } }
					6 = { add_ruler_modifier = { name = ruler_trait_scholar } }
					6 = { add_ruler_modifier = { name = ruler_trait_minister } }
					6 = { add_ruler_modifier = { name = ruler_trait_warmonger } }
					6 = { add_ruler_modifier = { name = ruler_trait_terror } }
					7 = { add_ruler_modifier = { name = ruler_trait_hero } }
					6 = { add_ruler_modifier = { name = ruler_trait_dove } }
					6 = { add_ruler_modifier = { name = ruler_trait_equestrian } }
					6 = { add_ruler_modifier = { name = ruler_trait_philanthropist } }
					7 = { add_ruler_modifier = { name = ruler_trait_respected } }
					6 = { add_ruler_modifier = { name = ruler_trait_hawk } }
					6 = { add_ruler_modifier = { name = ruler_trait_strong } }
					6 = { add_ruler_modifier = { name = ruler_trait_trade } }
				}
			}
				
			if = {
				limit = { normal_or_historical_nations = yes }
				trigger_switch = {
					on_trigger = tag
					OSM = {
						add_permanent_claim = 602
						capital_scope = {
							infantry = OSM
							infantry = OSM
							infantry = OSM
							cavalry = OSM
							cavalry = OSM
						}
					}
					TUR = {
						ghazi_unity_group = {
							limit = {
								NOT = { owned_by = TUR }
								NOT = { is_claim = TUR }
								NOT = { is_core = TUR }
							}
							add_permanent_claim = TUR
						}
					}
					MAM = {
						every_country = {
							limit = { primary_culture = turkish }
							reverse_add_opinion = { who = MAM modifier = mam_turks_opinion }
						}
						1625 = { kill_units = { who = MAM amount = 14 }}
						1634 = {
							light_ship = MAM
							light_ship = MAM
							galley = MAM
							galley = MAM
							galley = MAM
							galley = MAM
							transport = MAM
							transport = MAM
							transport = MAM
							transport = MAM
							transport = MAM
							transport = MAM
							transport = MAM
							transport = MAM
						}
					}
					ENG = {
						if = {
							limit = { has_country_flag = 100war_claim_throne }
							if = {
								limit = { NOT = { 165 = { is_core = ENG }}}
								165 = { add_permanent_claim = ENG }	# Cherbourg
							}
							if = {
								limit = { NOT = { 166 = { is_core = ENG }}}
								166 = { add_permanent_claim = ENG }	# Caux
							}
							if = {
								limit = { NOT = { 167 = { is_core = ENG }}}
								167 = { add_permanent_claim = ENG }	# Caen
							}
							if = {
								limit = { NOT = { 177 = { is_core = ENG }}}
								177 = { add_permanent_claim = ENG }	# Calais
							}
						}
					}
					FLR = {
						random_list = {
							25 = { set_variable = { which = medici_optionb value = 1 } }
							25 = { set_variable = { which = medici_optionb value = 2 } }
							25 = { set_variable = { which = medici_optionb value = 3 } }
							25 = { set_variable = { which = medici_optionb value = 4 } }
						}
						random_list = {
							25 = { set_variable = { which = medici_optionc value = 1 } }
							25 = { set_variable = { which = medici_optionc value = 2 } }
							25 = { set_variable = { which = medici_optionc value = 3 } }
							25 = { set_variable = { which = medici_optionc value = 4 } }
						}
					}
				}
			}
			# Historical Setups
			if = {
				limit = { OR = { tag = OSM tag = TUR }}
				if = {
					limit = { exists = AYD }
					reverse_add_opinion = { who = AYD modifier = harboring_fugitive }
				}
				if = {
					limit = { exists = KRS }
					reverse_add_opinion = { who = KRS modifier = harboring_fugitive }
				}
			}
			if = {
				limit = { tag = TUR has_global_flag = janissaries_established }
				if = {
					limit = { NOT = { is_year = 1400 }}
					if = {
						limit = { has_dlc = "Cradle of Civilization" }
						add_country_modifier = { name = coc_janissaries_1 duration = -1 }
					}
					if = {
						limit = { NOT = { has_dlc = "Cradle of Civilization" }}
						add_country_modifier = { name = vef_janissaries_1 duration = -1 }
					}
				}
				if = {
					limit = { is_year = 1400 NOT = { is_year = 1449 }}
					if = {
						limit = { has_dlc = "Cradle of Civilization" }
						add_country_modifier = { name = coc_janissaries_2 duration = -1 }
					}
					if = {
						limit = { NOT = { has_dlc = "Cradle of Civilization" }}
						add_country_modifier = { name = vef_janissaries_2 duration = -1 }
					}
				}
				if = {
					limit = { is_year = 1449 NOT = { has_country_flag = janissary_coprs_troubles }}
					if = {
						limit = { has_dlc = "Cradle of Civilization" }
						add_country_modifier = { name = coc_janissaries_3 duration = -1 }
					}
					if = {
						limit = { NOT = { has_dlc = "Cradle of Civilization" }}
						add_country_modifier = { name = vef_janissaries_3 duration = -1 }
					}
				}
				if = {
					limit = { has_country_flag = janissary_coprs_troubles }
					if = {
						limit = { has_dlc = "Cradle of Civilization" }
						add_country_modifier = { name = coc_janissaries_4 duration = -1 }
					}
					if = {
						limit = { NOT = { has_dlc = "Cradle of Civilization" }}
						add_country_modifier = { name = vef_janissaries_4 duration = -1 }
					}
				}
			}
			if = {
				limit = {
					tag = POR
					GAL = { is_subject_of = POR }
				}
				country_event = { id = flavor_spa.217 days = 730 }
			}
			if = {
				limit = {
					OR = {
						tag = CAS
						tag = SPA
					}
					is_year = 1493
					NOT = { is_year = 1510 }
				}
				add_country_modifier = { name = "the_unknown_frontier" duration = 5475 }
			}
			if = {
				limit = {
					tag = BOH
					NOT = { religion = protestant }
					started_in = 1419.6.30
				}
				change_religion = hussite
			}
			if = {
				limit = { tag = KNI is_year = 1313 }
				country_event = { id = theknights.2 }
			}
			if = {
				limit = { tag = LUX NOT = { has_global_flag = treaty_trentschin }}
				add_casus_belli = {
					target = POL
					type = cb_luxembourg_claims
					months = 600
				}
			}
			if = {
				limit = { tag = PAP has_ruler = "Sede" dynasty = "Vacante" }
				country_event = { id = vef_papacy.150 days = 180 random = 180 }
			}
			if = {
				limit = {
					OR = {
						tag = CAS
						tag = SPA
						tag = POR
					}
					is_year = 1492
					NOT = { has_idea = quest_for_the_new_world }
				}
				add_idea = quest_for_the_new_world
			}
		}
			
		# Add Arsenale
		269 = { province_event = { id = venetian_arsenale.1 } }
		# After everything so the initial 400 stability is already applied
		random_country = { limit = { ai = yes } country_event = { id = vef_stability.1 }}
		# After everything so buildings are already in place
		if = {
			limit = { is_year = 1370 NOT = { has_global_flag = growth_start_setup }}
			set_global_flag = growth_start_setup
			random_country = { limit = { ai = yes } country_event = { id = vef_growth.2 days = 1 }}
		}
		initialize_schools_effect = yes #This is only used here but is used for readability of on_action file.
	}
	
	events = { 
		muslim_school_events.20 #Pick School
	}
}

# country
on_religion_change = {
	if = {
		limit = { government = theocracy }
		change_government = monarchy
		if = {
			limit = { tag = PAP NOT = { exists = RMG }}
			change_tag = RMG
		}
	}
	if = {
		limit = { NOT = { religion = confucianism } }
		remove_country_modifier = neo_confucianism
	}
	if = {
		limit = { religion_group = christian }
		remove_country_modifier = the_anti_christian_edict
	}
	if = {
		limit = { NOT = { religion = orthodox } }
		every_known_country = {
			limit = { reverse_has_opinion_modifier = { who = ROOT modifier = closed_down_the_patriarchate } }
			reverse_remove_opinion = { who = ROOT modifier = closed_down_the_patriarchate }
		}
	}
	if = {
		limit = {
			religion = catholic
			has_ruler_flag = personal_catholic_sympathies
		}
		country_event = { id = protestantism_events.19 }
	}
	if = {
		limit = {
			NOT = { religion = catholic }
			has_ruler_modifier = catholic_zealot
		}
		remove_country_modifier = catholic_zealot
	}
	if = {
		limit = {
			NOT = { religion = catholic }
			has_country_modifier = spanish_bible_translation
		}
		remove_country_modifier = spanish_bible_translation
	}
	if = {
		limit = {
			NOT = { religion = catholic }
			has_country_modifier = supressing_spanish_protestantism
		}
		remove_country_modifier = supressing_spanish_protestantism
	}
	if = {
		limit = {
			NOT = { religion = catholic }
			has_country_modifier = counter_reformation
		}
		remove_country_modifier = counter_reformation
	}
	if = {
		limit = {
			OR = {
				religion = protestant
				religion = presbyterian
				religion = anglican
			}
		}
		set_country_flag = converted_to_protestantism
	}
	if = {
		limit = {
			ai = yes
			in_league = catholic
			is_in_league_war = no
		}
		every_country = {
			limit = {
				is_league_leader = yes
				is_league_friend = ROOT
			}
			ROOT = { leave_league = PREV }
		}
	}
}

# country.
on_secondary_religion_change = {
	# Done from code: add_prestige = -50 (Define: CHANGE_SECONDARY_PRESTIGE_HIT)
	every_owned_province = {
		limit = { has_province_modifier = tengri_monastic_order }
		remove_province_modifier = tengri_monastic_order
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_shiite_settled_in_capital }
		remove_province_modifier = tengri_shiite_settled_in_capital
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_insincere_leadership }
		remove_province_modifier = tengri_insincere_leadership
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_religious_influx }
		remove_province_modifier = tengri_religious_influx
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_ruler_questioned }
		remove_province_modifier = tengri_ruler_questioned
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_strengthened_local_clans }
		remove_province_modifier = tengri_strengthened_local_clans
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_growing_cities }
		remove_province_modifier = tengri_growing_cities
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_christian_mission }
		remove_province_modifier = tengri_christian_mission
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_unchristian_values }
		remove_province_modifier = tengri_unchristian_values
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_monastic_order }
		remove_province_modifier = tengri_monastic_order
	}
	every_owned_province = {
		limit = { has_province_modifier = hindufication }
		remove_province_modifier = hindufication
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_influx_of_monks }
		remove_province_modifier = tengri_influx_of_monks
	}
	every_owned_province = {
		limit = { has_province_modifier = tengri_abandoning_the_old_ways }
		remove_province_modifier = tengri_abandoning_the_old_ways
	}
	remove_country_modifier = tengri_devout_muslim
	remove_country_modifier = tengri_confucian_elites_alienated
	remove_country_modifier = tengri_confucian_titles
	remove_country_modifier = tengri_traditionalists_strengthened
	remove_country_modifier = tengri_confucian_nobles
	remove_country_modifier = tengri_pali_legal_traditions
	remove_country_modifier = tengri_religious_pilgrimages
	remove_country_modifier = tengri_monks_in_capital
	remove_country_modifier = tengri_influx_of_monks
	remove_country_modifier = tengri_shiite_immigration
	remove_country_modifier = support_of_the_khojas
	remove_country_modifier = black_shamanism_modifier
	remove_country_modifier = tengri_animist_pantheon
	remove_country_modifier = zoroastrian_traders
	remove_country_modifier = spread_of_tengri_tea_ceremony
	remove_country_modifier = tengri_tea_ceremony
	remove_country_modifier = tengri_japanese_swordsmithing
	remove_country_modifier = tengri_bow_and_arrow_defended
	remove_country_modifier = tengri_support_of_shamans
	remove_country_modifier = tengri_hindu_conflict
	remove_country_modifier = tengri_hindu_syncretism
	remove_country_modifier = tengri_devout_christian_ruler
	remove_country_modifier = tengri_personal_confessor
	remove_country_modifier = tengri_confucian_administrators
	remove_country_modifier = tengri_traditional_elites_alienated
	remove_country_modifier = tengri_jihad
	remove_country_modifier = tengri_stood_up_for_yassa
	remove_country_modifier = tengri_sufi_teacher
	remove_country_modifier = tengri_qadi
	remove_country_modifier = tengri_religious_influx
	remove_country_modifier = tengri_ibadi_scholars
	remove_country_modifier = tengri_clergy_conflicts
	remove_country_modifier = tengri_shamans_spurned
	clr_country_flag = khojas_established
	clr_country_flag = tengri_christian_devout_court
	clr_ruler_flag = tengri_muslim_ruler_questioned
	if = {
		limit = {
			check_variable = { which = khojas_retained value = 1 }
		}
		set_variable = {
			which = khojas_retained value = 0
		}
	}
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	country_event = { id = colonial_nation.90 days = 1 }
}

# country
on_colonial_reintegration = {
	events = {
		colonial_nation.91
	}
}

# country
on_peace_actor = {
#	if = {
#		limit = { has_country_flag = suzerainty_war_overlord }
#		clr_country_flag = suzerainty_war_overlord
#		random_country = { limit = { has_country_flag = restore_suzerainty_@ROOT } create_subject = { who = ROOT subject_type = suzerainty } set_country_flag = overlord_flag_@ROOT }
#		set_variable = { which = vassal_progress which = vassal_save }
#		set_variable = { which = vassal_save value = 0 }
#		set_country_flag = vassal_flag
#	}
	events = {
		usa_dlc.36				# Evacuation Day
		#native_americans.7		# Appoint Peace Chief
		#flavor_swe.10017
		vef_hansa.10001			# Delayed Elections
		vef_hansa.10110			# Delayed Elections
		vef_hansa.20002			# Captured Kontors
		vef_hansa.20003			# Captured Kontors
		theknights.102		#Restore Priories?
	}
}

# country
on_peace_recipient = {
#	if = {
#		limit = { has_country_flag = suzerainty_war_overlord }
#		clr_country_flag = suzerainty_war_overlord
#		random_country = { limit = { has_country_flag = restore_suzerainty_@ROOT } create_subject = { who = ROOT subject_type = suzerainty } set_country_flag = overlord_flag_@ROOT }
#		set_variable = { which = vassal_progress which = vassal_save }
#		set_variable = { which = vassal_save value = 0 }
#		set_country_flag = vassal_flag
#	}
	events = {
		#native_americans.7		# Appoint Peace Chief
		#flavor_swe.10017
		vef_hansa.10001			# Delayed Elections
		vef_hansa.10110			# Delayed Elections
		vef_hansa.20002			# Captured Kontors
		vef_hansa.20003			# Captured Kontors
		theknights.102		#Restore Priories?
	}
}

# country
# root = winning country, from = loser country
on_war_won = {
	#FROM = { country_event = { id = flavor_cri.6 } }
	ROOT = { country_event = { id = tributary_events.32 } }
	if = {
		limit = {
			tag = BYZ
			OR = {
				has_country_modifier = byzantine_decline1
				has_country_modifier = byzantine_decline2
			}
		}
		every_owned_province = { limit = { culture = greek } add_local_autonomy = -5 }
	}
	if = {
		limit = { 
			has_country_flag = venetian_arsenale_occupied
			OR = {
				is_at_war = no
				NOT = { owns = 269 }
			}
		}
		clr_country_flag = venetian_arsenale_occupied
	}
	# Fire the new province events for any ally in the war who also got territory
	every_country = {
		limit = { alliance_with = ROOT }
		country_event = { id = vef_libbuild.100 }
		country_event = { id = vef_libbuild.200 }
		country_event = { id = vef_libbuild.300 }
	}
	events = {
		flavor_eng.9104			# End of Hundred Years War
		flavor_fra.9104			# End of Hundred Years War
		vef_libbuild.100		#Monarchy; non-nomad
		vef_libbuild.200		#Republics; non-enlightenment
		vef_libbuild.300		#Nomads
		flavor_spa.4			#Conquest of Melilla
		flavor_spa.5			#Conquest of Oran
	}
}

# country
# root = loser country, from = winner country
on_war_lost = {
	#ROOT = { country_event = { id = flavor_cri.6 } }
	ROOT = { country_event = { id = tributary_events.32 } }
	if = {
		limit = { 
			has_country_flag = venetian_arsenale_occupied
			OR = {
				is_at_war = no
				NOT = { owns = 269 }
			}
		}
		clr_country_flag = venetian_arsenale_occupied
	}
	events = {
		flavor_eng.9104			# End of Hundred Years War
		flavor_fra.9104			# End of Hundred Years War
		vef_dynasty.1			#Swap union if soundly defeated
	}
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	if = {
		limit = {
			tag = MAM
			has_disaster = mamluk_reforms
			FROM = { tag = REB }
		}
		change_variable = { which = mamluk_strength value = -2 }
	}
	if = {
		limit = {
			tag = RUS
			has_disaster = sobor_revolt
			FROM = { tag = REB }
		}
		change_variable = { which = aristocratic_privilege value = -1 }
	}
	if = {
		limit = {
			has_disaster = vef_electivemonarchy
			FROM = { tag = REB }
		}
		change_variable = { which = aristocratic_privilege value = -1 }
	}
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	battle_cult_spreading_effect = yes #Scripted effect for fetishist cult mechanics.
	random_events = {
		95 = 0
		5 = vef_historical_friends.1 #Historical Friendship Broken
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {
	if = {
		limit = { has_ruler_leader_from = FROM }
		FROM = {
			change_variable = { which = ruler_military_prowess value = -1 }
			ruler_prowess_demerit = yes
		}
	}
	if = {
		limit = { has_heir_leader_from = FROM }
		FROM = {
			change_variable = { which = heir_military_prowess value = -1 }
			heir_prowess_demerit = yes
		}
	}
	random_events = {
		1000 = 0
	}
}

# province
# root = location, from = winner country
on_battle_lost_province = {
	if = {
		limit = { has_ruler_leader_from = FROM }
		FROM = {
			change_variable = { which = ruler_military_prowess value = 1 }
			ruler_prowess_award = yes
		}
	}
	if = {
		limit = { has_heir_leader_from = FROM }
		FROM = {
			change_variable = { which = heir_military_prowess value = 1 }
			heir_prowess_award = yes
		}
	}
	if = {
		limit = {
			owner = {
				has_disaster = vef_electivemonarchy
				any_owned_province = { has_province_modifier = em_noble_neutrality }
			}
		}
		if = {
			limit = { FROM = { tag = REB }}
			owner = {
				random_owned_province = {
					limit = { has_province_modifier = em_noble_neutrality }
					remove_province_modifier = em_noble_neutrality
					add_province_modifier = { name = em_noble_resistance duration = -1 }
				}
			}
		}
		if = {
			limit = { NOT = { FROM = { tag = REB }}}
			owner = {
				random_owned_province = {
					limit = { has_province_modifier = em_noble_neutrality }
					remove_province_modifier = em_noble_neutrality
					add_province_modifier = { name = em_noble_support duration = -1 }
				}
			}
		}
	}
	if = {
		limit = {
			has_province_modifier = em_noble_resistance
			owner = { has_disaster = vef_electivemonarchy }
			owned_by = FROM
			controlled_by = FROM
		}
		random = {
			chance = 45
			remove_province_modifier = em_noble_resistance
			add_province_modifier = { name = em_noble_neutrality duration = -1 }
		}
	}
	random_events = {
		1000 = 0
		100 = tyw_events.22  # Capital Battle in Religious War
	}
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {

}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={

}

# province
# root = location, from = country doing it
on_removed_from_company ={

}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# country
# root = winning country, from = location
on_siege_won_country = {
	#if = {
	#	limit = {
	#		tag = BYZ
	#		has_factions = yes
	#	}
	#	add_faction_influence = { faction = byz_militarist influence = 1 }
	#}
	
	if = {
		limit = {
			FROM = { has_province_modifier = crusade_goal }
			has_country_flag = crusade_member
		}
		FROM = { add_territorial_core = ROOT }
	}
	if = {
		limit = { FROM = { has_ruler_leader_from = ROOT }}
		change_variable = { which = ruler_military_prowess value = 1 }
		ruler_prowess_award = yes
	}
	if = {
		limit = { FROM = { has_heir_leader_from = ROOT }}
		change_variable = { which = heir_military_prowess value = 1 }
		heir_prowess_award = yes
	}

	#add_prestige = 0.5

	events = {
		tyw_events.14 # Fall of Prague in Religious War
		flavor_sax.10000	#Electorship of Saxony
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
	#if = { 
	#	limit = { 
	#		tag = BYZ
	#		has_factions = yes
	#	}
	#	add_faction_influence = { faction = byz_militarist influence = -1 }
	#}
	#add_prestige = -0.5
	#add_legitimacy = -0.5
	events = {
		theknights.4	#Fall of Rhodes - Human Only
	}
}

# province
# root = location, from = losing country
on_siege_won_province = {
	if = { 
		limit = {
			is_capital = yes
			NOT = { controlled_by = FROM }
			owned_by = FROM
		}
		FROM = {
			add_years_of_income = -0.05
			add_legitimacy = -5
			add_prestige = -5
		}
	}
	if = {
		limit = {
			owner = { has_disaster = vef_electivemonarchy }
			FROM = { tag = REB }
		}
		if = {
			limit = {
				has_building = nobles_40
				has_province_modifier = em_noble_resistance
			}
			remove_province_modifier = em_noble_resistance
			add_province_modifier = { name = em_noble_support duration = -1 }
		}
		if = {
			limit = { has_building = nobles_60 }
			remove_building = nobles_60
			add_building = nobles_40
			random = {
				chance = 60
				remove_province_modifier = em_noble_resistance
				add_province_modifier = { name = em_noble_neutrality duration = -1 }
			}
		}
		if = {
			limit = { has_building = nobles_80 }
			remove_building = nobles_80
			add_building = nobles_60
			random = {
				chance = 20
				remove_province_modifier = em_noble_resistance
				add_province_modifier = { name = em_noble_neutrality duration = -1 }
			}
		}
	}

	events = {
		venetian_arsenale.3 #Arsenal Reconquered
	}
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
	if = {
		limit = { NOT = { owned_by = FROM } }
	#	add_unrest = 2
	#	add_local_autonomy = -5
		if = { 
			limit = { is_capital = yes }
			add_unrest = 3
		}
	}
	if = {
		limit = {
			OR = {
				has_building = sheriffs_office
				has_building = courthouse
				has_building = town_hall
			}
		}
		owner = { every_owned_province = { limit = { area = FROM } add_local_autonomy = 20 add_unrest = 5 }}
	}
	events = {
		french_wars_of_religion.7 #Ravening Religious Fanatics
		french_wars_of_religion.9 #french_wars_of_religion.9
		#tjl_aristocrats.60001 # Clear raid and raid_support flags, and raid related province modifiers
		#tjl_religious_events.10005
	}
	random_events = {
		90 = 0
		10 = vef_forts.3  #Fortifications destroyed
		25 = venetian_arsenale.2 #Arsenal Damaged
	}
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
}

# country 
on_new_monarch = {
	clr_country_flag = regency_decision_run
	clr_country_flag = queen_regency
	clr_country_flag = uncle_regency
	clr_country_flag = noble_regency
	clr_country_flag = bureaucrat_regency
	clr_country_flag = church_regency
	if = {
		limit = { has_ruler = "Cadet Branch" }
		random_country = {
			limit = {
				has_country_flag = cadet_branch_@ROOT
			#	NOT = { any_country = { NOT = { tag = PREV } check_variable = { which = cadet_branch_time which = PREV }}}
			}
			clr_country_flag = cadet_branch_@ROOT
			set_variable = { which = cadet_branch_time value = 0 }
			if = {
				limit = { is_subject_of = ROOT }
				grant_independence = yes
			}
			create_union = ROOT
		}
	}
	if = {
		limit = { has_ruler = "Heir Apparent" }
		random_country = {
			limit = { has_country_flag = heir_apparent_@ROOT }
			clr_country_flag = heir_apparent_@ROOT
			create_union = ROOT
		}
	}
	if = {
		limit = { has_new_dynasty = yes }
		every_country = {
			limit = { ROOT = { has_country_flag = cadet_branch_@PREV }}
			ROOT = { clr_country_flag = cadet_branch_@PREV }
		}
		every_country = {
			limit = { has_country_flag = cadet_branch_@ROOT }
			clr_country_flag = cadet_branch_@ROOT
		}
	}
	if = {
		limit = { is_female = yes }
		every_country = {
			limit = {
				ROOT = { has_country_flag = cadet_branch_@PREV }
				has_country_flag = vef_salic_law
			}
			ROOT = { clr_country_flag = cadet_branch_@PREV }
		}
	}
	set_variable = { which = monarch_stats value = 0 }
	set_variable = { which = ruler_military_prowess which = heir_military_prowess }
	set_variable = { which = heir_military_prowess value = 0 }
	export_to_variable = { which = monarch_adm_stat value = ADM }
	export_to_variable = { which = monarch_dip_stat value = DIP }
	export_to_variable = { which = monarch_mil_stat value = MIL }
	change_variable = { which = monarch_stats which = monarch_adm_stat }
	change_variable = { which = monarch_stats which = monarch_dip_stat }
	change_variable = { which = monarch_stats which = monarch_mil_stat }
	determine_consort = yes
	if = {
		limit = { is_variable_equal = { which = vef_heir_gen value = 1 }}
		advance_generation = yes
	}
	if = {
		limit = { is_variable_equal = { which = vef_heir_gen value = 2 }}
		double_advance_generation = yes
	}
	if = {
		limit = { is_variable_equal = { which = vef_heir_gen value = 3 }}
		triple_advance_generation = yes
	}
	if = {
		limit = {
			OR = {
				check_variable = { which = monarch_stats value = 10 }
				is_nomad = yes
			}
		}
		set_ruler_flag = ambitious_vassal
	}
	if = {
		limit = { check_variable = { which = jousting_counter value = 1 }}
		set_variable = { which = jousting_counter value = 4 }
	}

	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { has_dlc = "Mandate of Heaven" }
			has_country_modifier = the_mandate_of_heaven
			NOT = { legitimacy = 80 }
		}
		country_event = { id = china_events.32 }	# History of last ruler 
	}
	events = {
		vef_government.1	# New monarch code
		vef_dynasty.113		# Calculate new heir
		tribal_succession.1	# Harsh anti-tribals.
		flavor_mlo.1	# The Ambrosian Republic
		flavor_kol.1	# Bavarian Archbishop
		flavor_ori.7	# Hamvira Victorious
		flavor_kbo.1	# The two branches of the Sayfawa dynasty
		flavor_kbo.8	# Sayfawa pretenders
		flavor_byz.10001	# Faction infighting on ascension (Justinian Flag)
		flavor_byz.10024	# Faction infighting on ascension (no Justinian Flag)
		vef_caltabellotta.1	# Peace of Caltabellotta fallout
		vef_100war.10000 # Succession crisis on death of first French monarch
		vef_dynasty.20007 # Cleanup Fear and Loathing Event Chain
		vef_100war.10009 # England - Homage to France
		vef_100war.10010 # France - English Homage
		vef_policy.10008 # Heir Education results
		vef_papacy.202 # Choose Sides - Schism
		vef_papacy.210 # Pope Back to Rome ( If Avignon wins )
		flavor_pol.3480 #The Pacta Conventa
		protestantism_events.15 #Catholic Leaning Monarch
		tengri_events.17 #Keep the Khojas in Power?
		vef_bohcrown.1 # Bohemian Crown
		vef_barbarossa.10	# N. African - Pirate Support?
		vef_newgov.30000	# Devsirme system
		
		# SI
		venetian_republic.1
		flavor_brapru.22 #Succession of Albrecht Achilles
		flavor_brapru.25 #Dispositio Achillea (can also trigger from flavor_brapru.22)
		china_events.43			# Picking new Capital for China
		celestial_empire_events.3 #Resistance to Sinicization
	}

	random_events = { 
		1000 = 0
		100 = flavor_kol.1	# Bavarian Archbishop
		100 = flavor_tim.1  # The Disintegration of the Timurid Empire
		100 = flavor_hsa.3 	# Hansa: Tagfahrt
		100 = inti_events.1	# Birth of a Panaca
		50 = dynastic_events.5
		25 = harem_events.7 #Failed Policy of Fratricide
	}
}

on_new_consort = {
	country_event = { id = consort_events.2 }
	if = {
		limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	}
	clr_country_flag = vef_miscarriage
	clr_country_flag = vef_miscarriage_1
	clr_country_flag = vef_miscarriage_2
	clr_country_flag = vef_miscarriage_3
}

# country
on_monarch_death = {
	set_variable = { which = ruler_military_prowess value = 0 }
	clr_country_flag = vef_miscarriage
	clr_country_flag = vef_miscarriage_1
	clr_country_flag = vef_miscarriage_2
	clr_country_flag = vef_miscarriage_3
	set_variable = { which = male_illeg_1_age value = 1100 }
	set_variable = { which = male_illeg_2_age value = 1100 }
	set_variable = { which = male_illeg_3_age value = 1100 }
	set_variable = { which = male_illeg_4_age value = 1100 }
	set_variable = { which = female_illeg_1_age value = 1100 }
	set_variable = { which = female_illeg_2_age value = 1100 }
	set_variable = { which = female_illeg_3_age value = 1100 }
	set_variable = { which = female_illeg_4_age value = 1100 }
	if = {
		limit = {
			tag = ANS
			BRA = {
				has_country_flag = albrecht_achilles_flag
			}
		}
		BRA = {
			clr_country_flag = albrecht_achilles_flag #Just to be sure
			kill_heir = yes #If Albrecht Achilles dies in Ansbach he will also be dead in Brandenburg, will appear as normal death of heir to BRA.
		}
	}
	if = {
		limit = { is_subject_of_type = iure_uxoris }
		if = {
			limit = { has_dlc = "Rights of Man" }
			overlord = { remove_consort = yes }
		}
		grant_independence = yes
	}
	if = {
		limit = { any_subject_country = { is_subject_of_type = iure_uxoris }}
		every_subject_country = {
			limit = { is_subject_of_type = iure_uxoris }
			grant_independence = yes
		}
	}
	events = {
		vef_regency.10004	#Regent dies
		theknights.300		#Knights elect a new Grandmaster
		vef_100war.20000	#Breton Succession
	}
}

# country 
on_regent = {
	hidden_effect = {
		capital_scope = { add_unrest = 1 }
		every_owned_province = { add_unrest = 1 }
		subtract_variable = { which = national_stability value = 100 }
	}

	events = {
		tribal_succession.1	# harsh anti-tribals.
		flavor_mlo.1	# The Ambrosian Republic
		flavor_byz.10005	# Faction in power gains strength
		flavor_byz.10006	#
		flavor_byz.10007	#
		vef_bohcrown.1  # Bohemian Crown
		vef_regency.10001	# Regency Council
		vef_100war.10000	# Succession crisis on death of first French monarch
		vef_caltabellotta.1	# Peace of Caltabellotta fallout
	}
}

# country 
on_new_term_election = {
	events = {
		700		# Election event
		vef_elections.10000	# Vassal Governorship/Eyalet elections
		vef_hansa.10000		# Hansa elections
		elections.720		# Dutch Republic
		vef_medici.10001	# Medici "Election"
	}
}

# country 
on_death_election = {
	events = {
		701		# Election event
		vef_elections.10001	# Vassal Governorship/Eyalet elections
		elections.721		# Dutch Republic
		vef_hansa.10100		# Hansa Elections
		vef_bohcrown.2		# Bohemian Republic
		vef_papacy.100		# Papal Conclave - Avignon Papacy
		vef_papacy.102		# Papal Conclave - Western Schism
		vef_papacy.103		# Papal Conclave - Post-Schism
		vef_papacy.109		# Papal Conclave - Endgame
		vef_medici.10001	# Medici "Election"
	}
}

# country
on_death_foreign_slave_ruler = {
	events = {
		mamluk_events.0 # Choose new ruler
	}
}

# country 
on_replace_governor = {
	events = {
		elections.707
	}
}

on_death_foreign_slave_ruler = {
	events = {
		mamluk_events.0 # Choose new ruler
	}
}

# country; after the hard-coded effects are applied
on_bankruptcy = {
}

# country (country annexing, root = target)
on_diplomatic_annex = {	#This covers diplo action annexation AND diplo action integration
	FROM = { every_owned_province = { add_permanent_province_modifier = { name = lib_building_cooldown duration = 45  hidden = yes }}}
	change_variable = { which = previous_count which = FROM }
	if = {
		limit = { senior_union_with = FROM }
		add_accepted_culture = FROM
	}
	if = {
		limit = {
			NOT = { FROM = { culture_group = ROOT }}
			NOT = { senior_union_with = FROM FROM = { culture_group = gaelic } OR = { culture_group = french culture_group = english culture_group = scandinavian }}
		}
		FROM = { every_owned_province = { limit = { is_capital = no } add_territorial_core = ROOT cede_province = ROOT add_nationalism = -30 } capital_scope = { set_province_flag = integrate_was_capital }}
	}
	events = {
		vef_onactions.1
		vef_papacy.1000 # Pope Flees if Rome Annexed
	}
}

# country
on_heir_death = {
	set_variable = { which = heir_stats value = 0 }
	set_variable = { which = heir_military_prowess value = 0 }
	if = {
		limit = { has_female_heir = yes }
		clr_country_flag = vef_heir_pregnancy
	}
	if = {
		limit = { has_country_flag = heir_dip_education }
		clr_ruler_flag = heir_dip_education
	}
	if = {
		limit = { has_country_flag = heir_mil_education }
		clr_ruler_flag = heir_mil_education
	}
	if = {
		limit = { has_country_flag = heir_adm_education }
		clr_ruler_flag = heir_adm_education
	}
	if = {
		limit = { has_ruler_flag = well_advised_tutored_heir }
		clr_ruler_flag = well_advised_tutored_heir
	}
	if = {
		limit = { has_ruler_flag = heir_went_on_grand_tour }
		clr_ruler_flag = heir_went_on_grand_tour
	}
	if = {
		limit = { has_country_flag = albrecht_achilles_flag }
		clr_country_flag = albrecht_achilles_flag #Death of original Albrecht Achilles
	}
	if = {
		limit = { has_ruler_flag = sancaga_cikma }
		clr_ruler_flag = sancaga_cikma
		every_owned_province = {
			limit = {
				has_province_modifier = heir_in_training
			}
			remove_province_modifier = heir_in_training
		}
	}
	if = {
		limit = { has_ruler_flag = returned_from_sancaga_sikma_province }
		clr_ruler_flag = returned_from_sancaga_sikma_province
	}
	if = {
		limit = { has_country_modifier = good_heir_general }
		remove_country_modifier = good_heir_general
	}
	if = {
		limit = { has_country_modifier = poor_heir_general }
		remove_country_modifier = poor_heir_general
	}
	events = {
		vef_regency.10003	#Heir Dies During Regency
		vef_dynasty.2		#Heir dies while Iure Uxoris
		vef_dynasty.112		#Calculate New Heir
	}
}

# country
on_queen_death = {
	
	if = {
		limit = { has_consort_flag = 10_years_anniversary }
		set_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_consort_flag = 20_years_anniversary }
		set_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}

	if = {
		limit = {
			NOT = { has_regency_trigger = yes }
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		clr_ruler_flag = lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	clr_ruler_flag = marriage_length
	if = {
		limit = { any_subject_country = { is_subject_of_type = iure_uxoris }}
		every_subject_country = {
			limit = { is_subject_of_type = iure_uxoris }
			grant_independence = yes
			kill_ruler = yes
		}
	}
}

# country
on_new_heir = {
	set_variable = { which = heir_stats value = 0 }
	export_to_variable = { which = heir_adm_stat value = heir_adm }
	export_to_variable = { which = heir_dip_stat value = heir_dip }
	export_to_variable = { which = heir_mil_stat value = heir_mil }
	change_variable = { which = heir_stats which = heir_adm_stat }
	change_variable = { which = heir_stats which = heir_dip_stat }
	change_variable = { which = heir_stats which = heir_mil_stat }
	events = {
		vef_regency.10000	#Set up council
		vef_dynasty.4		# Male heir in Iure Uxoris senior with no heirs in junior
	}
}

# country 
on_weak_heir_claim = {
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	events = {
		theocracy.1
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	events = {
		900
	}
}

# HRE Prince released by the emperor
on_released_hre_member = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	events = {
	}
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	events = {
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	events = {
	}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	events = {
	}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	events = {
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	events = {
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	events = {
		909
	}
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	events = {
	}
}

on_lock_hre_religion = {
	events = {
		vef_leaguewars.3
		vef_leaguewars.8
	}
}

on_change_hre_religion = {
	events = {
		vef_leaguewars.2
		vef_leaguewars.7
	}
}

on_hre_religion_white_peace = {
	events = {
		vef_leaguewars.4
		vef_leaguewars.9
	}
}

# When a non-native changes government type
on_government_change = {
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
}

# Nation is integrated after being in union
on_integrate = {	#This is only if integrated automatically on monarch ascension; for diplomatic action see on_diplomatic_annex
	FROM = { every_owned_province = { add_permanent_province_modifier = { name = lib_building_cooldown duration = 45  hidden = yes }}}
	change_variable = { which = previous_count which = FROM }
	add_accepted_culture = FROM
	if = {
		limit = {
			NOT = { FROM = { culture_group = ROOT }}
			NOT = { FROM = { culture_group = gaelic } OR = { culture_group = french culture_group = english culture_group = scandinavian }}
		}
		FROM = { every_owned_province = { limit = { is_capital = no } add_territorial_core = ROOT cede_province = ROOT } capital_scope = { set_province_flag = integrate_was_capital }}
	}
	events = {
		vef_onactions.1
	}
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {	#This is only if annexed in war; for diplomatic action see on_diplomatic_annex
	FROM = {
		if = {
			limit = { is_emperor_of_china = yes }
			dismantle_empire_of_china = yes
			set_global_flag = empire_of_china_dismantled
		}
	}
	events = {
		vef_papacy.1000 # Pope Flees if Rome Annexed
		celestial_empire_events.1 # Empire dismantled
	}
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	events = {
		
	}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	if = {
		limit = {
			technology_group = nomad_group
		}
		change_technology_group = chinese
		change_unit_type = chinese
	}
	set_mandate = 60
	china_superregion = {
		limit = {
			NOT = { is_core = ROOT }
		}
		add_permanent_claim = ROOT
	}
	if = {
		limit = {
			has_dlc = "Mandate of Heaven"
		}
		remove_faction = temples
		remove_faction = enuchs
		remove_faction = bureaucrats
	}
	if = {
		limit = {
			has_country_modifier = lost_mandate_of_heaven
		}
		remove_country_modifier = lost_mandate_of_heaven
	}
	country_event = { #Reforming the Bureaucracy
		id = china_events.31
		days = 365
	}
	country_event = {
		id = china_events.32 #Records of the last Empire
		days = 183
	}
	country_event = {
		id = celestial_empire_events.2
		days = 1825
	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	set_government_rank = 3
	add_country_modifier = {
		name = lost_mandate_of_heaven
		duration = 5475	# 15 years
	}

	china_superregion = {
		limit = {
			is_permanent_claim = ROOT
		}
		remove_claim = ROOT
	}
}

on_dismantle_revolution = {
	change_government = monarchy
	kill_ruler = yes
	set_revolution_target = xxx
	if = {
		limit = { has_heir = yes }
		clr_country_flag = vef_regency
		kill_heir = yes
	}
}

# province
on_adm_development = {
}

# province
on_dip_development = {
}

# province
on_mil_development = {
}

on_overextension_pulse = {
	random_events = {
		100 = overextension.1
		100 = overextension.2
		100 = overextension.3
		100 = overextension.4
		100 = overextension.5
		100 = overextension.6
		100 = overextension.7
		100 = overextension.8
		100 = overextension.9
		100 = overextension.10
	}
}


on_colonial_pulse = {
	events = {
		vef_colonial.100
		vef_colonial.101
	}
	random_events = {
		100 = colonial.1
		100 = colonial.2
		100 = colonial.3
		100 = colonial.4
		100 = colonial.5
		100 = colonial.6
		100 = colonial.7
		100 = colonial.8
		100 = colonial.9
		100 = colonial.10
		100 = colonial.11
		100 = colonial.12
		100 = colonial.13
		100 = colonial.14
		100 = colonial.15
		100 = colonial.16
		100 = colonial.17
		100 = colonial.18

		10000 = 0
	}
}

# country random events
on_bi_yearly_pulse = {

	events = {
		vef_government.2 # Bi-Yearly Pulse

		# Culture & Religion
		vef_culture.1

		# Government
		#vef_government.50077	# Need an architect?
		vef_newgov.10003		# Nomads Reform Pulse
		vef_realm.900			# AI RM Controls
	}

	random_events = {
		# Veritas et Fortitudo
		100 = vef_disease.5 # Black Death - Monarch Dies
		100 = vef_disease.6 # Black Death - Heir Dies
		100 = vef_disease.7 # Black Death - Advisor Dies 

		100 = vef_aristocrats.60000 # Nobles complain about grain prices
		100 = vef_aristocrats.60001 # Cities complain about grain prices
		100 = vef_aristocrats.60008 # Nobles complain about loss of privileges

		100 = flavor_jpn.20000 # A Monk Gains Notariety

		# randomevents.txt		
		100 = 3051
		100 = 5015
		100 = 5019
		100 = 5020
		100 = 5021
		100 = 5022
		100 = 5024
		100 = 5025
		100 = 5027
		100 = 5032
		100 = 5040
		100 = 5045
		100 = 5050
		100 = 5051
		100 = 5052
		100 = 5053
		100 = 5054
		100 = 5055
		100 = 5056
		100 = 5058
		100 = 5059
		100 = 5061
		100 = 5064
		100 = 5065
		100 = 5068
		100 = 5070
		100 = 5071
		100 = 5072
		100 = 5074
		100 = 5075
		100 = 5077
		100 = 5082
		100 = 5083
		100 = 5084
		100 = 5085
		100 = 5086
		100 = 5088
		100 = 5089
		100 = 5090
		100 = 5091
		100 = 5092
		100 = 5093
		100 = 5094
		100 = 5095
		100 = 5096
		#100 = 5097	#event changed in VeF
		100 = 5098
		100 = 5099
		100 = 6000
		100 = 6001
		100 = 6003
		100 = 6004
		100 = 6005
		100 = 6006
		100 = 6012
		100 = 6013
		100 = 6015
		100 = 710
		100 = 711
		100 = 712
		100 = 714
		100 = 715
		100 = 716
		100 = 717
		100 = 718
		100 = 719
		100 = 720
		100 = 722
		100 = 723
		100 = 724
		#100 = 725	#event changed in VeF
		100 = 726
		100 = 727
		100 = 728
		100 = 729
		100 = 730
		100 = 731
		100 = 732
		100 = 733
		100 = 734
		100 = 735
		100 = 736
		100 = 738
		100 = 739
		100 = 740
		100 = 741
		100 = 742
		
		100 = 850
		100 = 851
		100 = 852
		100 = 853
		100 = 854
		100 = 855
		100 = 857
		100 = 858
		100 = 859
		100 = 860
		100 = 861
		100 = 862
		100 = 864
		100 = 865
		100 = 866
		100 = 867
		100 = 868
		100 = 869
		100 = 870
		100 = 871
		100 = 872
		100 = 873
		100 = 874
		100 = 875
		100 = 876
		100 = 877
		100 = 878
		100 = 879
		100 = 880
		100 = 881
		100 = 882
		100 = 883
		100 = 884
		100 = 885
		100 = 836
		100 = 837
		100 = 838
		
		100 = 9472
		100 = 3097
		100 = 5005
		100 = 5026
		100 = 5037
		100 = 5063
		100 = 6014
		
		100 = random_event.1
		100 = random_event.2
		100 = random_event.3
		100 = random_event.4
		100 = random_event.5
		100 = random_event.7
		100 = random_event.8
		100 = random_event.9
		100 = random_event.10
		100 = random_event.11
		100 = random_event.12
		100 = random_event.13
		100 = random_event.14
		100 = random_event.15
		100 = random_event.16
		
		100 = random_event.26

      #Orthodox Metropolitans
      125 = patriarch_events.1
      125 = patriarch_events.2
      125 = patriarch_events.3
      75 = patriarch_events.4
      75 = patriarch_events.5

		# Mercantilism
		100 = 6326
		100 = 6327
		100 = 6328
		100 = 6329

		# Trade Specific
		100 = trade.1
		100 = trade.2
		100 = trade.3
		100 = trade.4
		100 = trade.5
		100 = trade.6
		100 = trade.7
		100 = trade.8
		100 = trade.9
		100 = trade.10
		100 = trade.11
		100 = trade.12
		
		# Catholic  Events      
		100 = catholic_flavor.4 
		100 = catholic_flavor.5 
		100 = catholic_flavor.6 
		100 = catholic_flavor.7 
		100 = catholic_flavor.8 
		#100 = catholic_flavor.9	# Catholic with Reform Desire trigger - Cannot trigger
		#100 = catholic_flavor.10	# Catholic with Reform Desire trigger - Cannot trigger
		
		# Tradegoods events
		100 = 6418
		100 = 6419
		100 = 6420
		100 = 6421
		100 = 6422
		100 = 6423
		100 = 6424
		100 = 6425
		100 = 6426
		100 = 6427
		100 = 6428
		100 = 6429
		100 = 6431
		100 = 6432
		100 = 6433
		100 = 6434

		# Refoms, when having parliaments.
		100 = reforms.1
		100 = reforms.2
		100 = reforms.3
		100 = reforms.4		

		100 = randomeventsstapehordes.1
		100 = randomeventsstapehordes.2
		100 = randomeventsstapehordes.3
		100 = randomeventsstapehordes.4
		100 = randomeventsstapehordes.5
		100 = randomeventsstapehordes.6
		100 = randomeventsstapehordes.7
		100 = randomeventsstapehordes.8
		100 = randomeventsstapehordes.13
		100 = randomeventsstapehordes.14
		100 = randomeventsstapehordes.17
		100 = randomeventsstapehordes.18
		100 = randomeventsstapehordes.19
		100 = randomeventsstapehordes.20
		100 = randomeventsstapehordes.21
		100 = randomeventsstapehordes.22
		100 = randomeventsstapehordes.23
		100 = randomeventsstapehordes.24

		# Sailor events
		100 = sailor_event.1
		100 = sailor_event.2
		100 = sailor_event.3
		100 = sailor_event.4
		100 = sailor_event.5

		# Corruption Events
		100 = corruption_event.16
		100 = corruption_event.17
		100 = corruption_event.18
		100 = corruption_event.19
		100 = corruption_event.20

		# Trade League Events
		100 = trade_league.1
		100 = trade_league.2
		100 = trade_league.3
		100 = trade_league.4
		100 = trade_league.7
		100 = trade_league.8
		100 = trade_league.9
		100 = trade_league.10
		100 = trade_league.11
		100 = trade_league.12
		100 = trade_league.13
		100 = trade_league.14

		# VeF Random Events
		100 = vef_random.30000
		100 = vef_random.50000
		100 = vef_random.50002
		100 = vef_random.50003
		100 = vef_random.50004
		100 = vef_random.50005
		100 = vef_random.50006
		100 = vef_random.50007
		100 = vef_random.50008
		100 = vef_random.50009
		100 = vef_random.50011
		100 = vef_random.50012
		100 = vef_random.50013
		100 = vef_random.50016
		100 = vef_random.50027
		100 = vef_random.50029
		100 = vef_random.50031
		100 = vef_random.50032
		100 = vef_random.50033
		100 = vef_random.50034
		100 = vef_random.50035
		100 = vef_random.50041
		100 = vef_random.50042
		100 = vef_random.50043

		100 = vef_religion.10014
		100 = vef_religion.10015

		# Trade Events
	#	100 = vef_trade.10001
	#	100 = vef_trade.10002
	#	100 = vef_trade.10003
	#	100 = vef_trade.10004
	#	100 = vef_trade.10005
	#	100 = vef_trade.10007
	#	100 = vef_trade.10019
	#	100 = vef_trade.10020

		# Faction power changes
	#	100 = vef_factions.10000
	#	100 = vef_factions.10001

		# England
		100 = flavor_gbr.10002 # London Company vs. Independent Merchants
		
		# Regency Events
		100 = vef_regency.20000
		100 = vef_regency.20001
		100 = vef_regency.20002
		
		# Government PolicyEvents
		200 = vef_newgov.300
		200 = vef_newgov.301
		200 = vef_newgov.302
		
		#Barbary Pirates
		200 = vef_barbarossa.13
		100 = vef_barbarossa.14

		#Personality Events
		50 = personality_events.10 #Just Dilema
		50 = personality_events.11 #A righteous King
		50 = personality_events.12 #A Righteous Republican Ruler
		50 = personality_events.13
		50 = personality_events.14
		50 = personality_events.15
		50 = personality_events.16
		50 = personality_events.17
		50 = personality_events.18
		50 = personality_events.19
		50 = personality_events.20
		50 = personality_events.21
		50 = personality_events.22
		50 = personality_events.23
		50 = personality_events.24
		50 = personality_events.25
		50 = personality_events.26
		50 = personality_events.27
		50 = personality_events.28
		50 = personality_events.29
		50 = personality_events.30
		50 = personality_events.31
		50 = personality_events.32
		50 = personality_events.33
		50 = personality_events.34
		50 = personality_events.35
		50 = personality_events.36
		50 = personality_events.37
		50 = personality_events.38
		50 = personality_events.39
		50 = personality_events.40
		50 = personality_events.41
		50 = personality_events.42
		50 = personality_events.43
		50 = personality_events.44
		50 = personality_events.45
		50 = personality_events.46
		50 = personality_events.47
		50 = personality_events.48
		50 = personality_events.49
		50 = personality_events.50
		50 = personality_events.51
		50 = personality_events.52
		50 = personality_events.53
		50 = personality_events.54
		50 = personality_events.55
		50 = personality_events.56
		50 = personality_events.57
		50 = personality_events.58
		
		#Confucian Events
		75 = confucian_events.19
		75 = confucian_events.20
		
		1000 = 0
	}
}

on_bi_yearly_pulse_2 = {
	random_events = {
		100 = corruption_event.1
		100 = corruption_event.2
		100 = corruption_event.3
		100 = corruption_event.4
		100 = corruption_event.5
		100 = corruption_event.6
		100 = corruption_event.7
		100 = corruption_event.8
		100 = corruption_event.9
		100 = corruption_event.10
		200 = corruption_event.11
		200 = corruption_event.12
		200 = corruption_event.13
		200 = corruption_event.14
		200 = corruption_event.15

		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {
}

on_bi_yearly_pulse_4 = {
}

# country random events
on_thri_yearly_pulse = {
	
	events = {
		vef_newgov.90000	# Government maintenance routine
		vef_newgov.100		# Maintenance Tick - Reduce Serfdom
		vef_newgov.110		# Maintenance Tick - Increase Serfdom
	}
	
	random_events = {
		# Republics
		100 = republics.4
		100 = republics.5
		100 = republics.6
		100 = republics.7
		100 = republics.8
		100 = republics.9
		100 = republics.10
		100 = republics.11
		100 = republics.12
		100 = republics.13
		100 = republics.14
		100 = republics.15
		100 = republics.16
		100 = republics.17
		100 = republics.18
		100 = republics.19
		100 = republics.20
		100 = republics.21
		100 = republics.22
		100 = republics.23
		100 = republics.24
		100 = republics.25
		100 = republics.26
		100 = republics.27
		100 = republics.28
		100 = republics.29
		100 = republics.30
		100 = republics.31
		100 = republics.32
		100 = republics.33
		100 = republics.34
		100 = republics.35
		100 = republics.36
		100 = republics.37
		100 = republics.38
		100 = republics.39
		100 = republics.40
		100 = republics.41
		100 = republics.42
		100 = republics.43
		
		# Theocracies
		100 = devotion_events.1
		100 = devotion_events.2
		100 = devotion_events.3
		100 = devotion_events.4
		100 = devotion_events.5
		100 = devotion_events.6
		100 = devotion_events.7
		100 = devotion_events.8
		100 = devotion_events.9
		100 = devotion_events.10
		100 = devotion_events.11
		100 = devotion_events.12
		100 = devotion_events.13
		100 = devotion_events.14
		100 = devotion_events.15
		100 = devotion_events.16
		100 = devotion_events.18
		100 = devotion_events.19
		100 = devotion_events.22
		100 = devotion_events.23
		100 = devotion_events.24
		100 = devotion_events.26
		100 = devotion_events.100
		100 = devotion_events.101
		100 = devotion_events.102
		100 = devotion_events.104
		100 = devotion_events.107
		100 = devotion_events.110
		100 = devotion_events.117
		100 = devotion_events.118
		100 = devotion_events.119
		100 = devotion_events.200
		100 = devotion_events.201
		100 = devotion_events.202
		100 = devotion_events.203
		100 = devotion_events.204
		100 = devotion_events.205
		100 = devotion_events.207
		100 = devotion_events.208
		100 = devotion_events.209
		100 = devotion_events.210
		100 = devotion_events.211
		100 = devotion_events.212
		100 = devotion_events.213
		100 = devotion_events.214
		100 = devotion_events.215
		100 = devotion_events.216
		100 = devotion_events.217
		100 = devotion_events.218
		100 = devotion_events.219

		# Japanese Daimyos
		50 = flavor_jap.10
		50 = flavor_jap.28
		100 = flavor_jap.40
		100 = flavor_jap.42
		100 = flavor_jap.43
		100 = flavor_jap.45
		100 = flavor_jap.49
		100 = flavor_jap.51
		100 = flavor_jap.52
		100 = flavor_jap.53
		100 = flavor_jap.54
		100 = flavor_jap.55
		
		# China
		75 = meritocracy_events.1
		75 = meritocracy_events.2
		75 = meritocracy_events.3
		75 = meritocracy_events.4
		75 = meritocracy_events.5
		50 = china_events.11
		25 = china_events.12
		25 = china_events.24
		
		1000 = 0		
	}
}

on_thri_yearly_pulse_2 = {
	random_events = {
		# Random to increase or decrease patriarch authority.
		25 = orthodox_flavor.1
		25 = orthodox_flavor.2
		25 = orthodox_flavor.3
		25 = orthodox_flavor.4
		25 = orthodox_flavor.5
		
		# Muslim Piety Events
		50 = muslim_piety.1
		50 = muslim_piety.2
		50 = muslim_piety.3
		50 = muslim_piety.4
		50 = muslim_piety.5
		50 = muslim_piety.6
		50 = muslim_piety.7
		50 = muslim_piety.8
		50 = muslim_piety.9
		50 = muslim_piety.10
		50 = muslim_piety.11
		50 = muslim_piety.12
		50 = muslim_piety.13
		50 = muslim_piety.14
		50 = muslim_piety.15
		50 = muslim_piety.16
		300 = 0		
	}
}

on_thri_yearly_pulse_3 = {
	random_events = {
		# Subject Interactions
		50 = subject_interaction_events.1
		50 = subject_interaction_events.4
		50 = subject_interaction_events.5
		50 = subject_interaction_events.6
		50 = subject_interaction_events.7
		50 = subject_interaction_events.9
		50 = subject_interaction_events.11
		50 = subject_interaction_events.14
		50 = subject_interaction_events.15
		50 = subject_interaction_events.17
		50 = subject_interaction_events.18
		50 = subject_interaction_events.19
		50 = subject_interaction_events.20
		50 = subject_interaction_events.21
		50 = subject_interaction_events.22
		50 = subject_interaction_events.23
		50 = subject_interaction_events.24
		50 = subject_interaction_events.25
		50 = subject_interaction_events.26
		50 = subject_interaction_events.27
		50 = subject_interaction_events.29
		50 = subject_interaction_events.30
		50 = subject_interaction_events.31
		50 = subject_interaction_events.32
		50 = subject_interaction_events.34
		50 = subject_interaction_events.35
		50 = subject_interaction_events.36
		50 = subject_interaction_events.38
		50 = subject_interaction_events.40
		50 = subject_interaction_events.43
		75 = tributary_events.1
		75 = tributary_events.2
		75 = tributary_events.3
		75 = tributary_events.4
		75 = tributary_events.5
		75 = tributary_events.6
		75 = tributary_events.7
		75 = tributary_events.8
		75 = tributary_events.9
		75 = tributary_events.10
		75 = tributary_events.13
		75 = tributary_events.16
		75 = tributary_events.17
		75 = tributary_events.18
		75 = tributary_events.19
		75 = tributary_events.23
		75 = tributary_events.24
		75 = tributary_events.26
		75 = tributary_events.25
		75 = tributary_events.27

		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
	random_events = {
		#Low Mandate Events
		100 = 0
		10 = china_events.45
		10 = china_events.46
		10 = china_events.47
		10 = china_events.48
		10 = china_events.49
		10 = china_events.50
		10 = china_events.51
		10 = china_events.52
		10 = china_events.53
		10 = china_events.54
		#10 = china_events.55 (triggers via neighbors)
		10 = china_events.56
		10 = china_events.57
		5 = china_events.58
		10 = china_events.59
		10 = china_events.60
	}
}

on_four_year_pulse = {
	random_events = {
		# Colonial Nations
		100 = colonial_nation.1
		100 = colonial_nation.4
		100 = colonial_nation.10
		100 = colonial_nation.12
		100 = colonial_nation.14
		100 = colonial_nation.77
		100 = colonial_nation.100
		100 = colonial_nation.102
		100 = colonial_nation.104
		100 = colonial_nation.106
		100 = colonial_nation.108
		100 = colonial_nation.110
		100 = colonial_nation.112
		100 = colonial_nation.114
		100 = colonial_nation.116
		100 = colonial_nation.118
		100 = colonial_nation.120
		100 = colonial_nation.122
		100 = colonial_nation.124
		100 = colonial_nation.126
		100 = colonial_nation.128
		100 = colonial_nation.130
		100 = colonial_nation.132
		100 = colonial_nation.134
		10 = colonial_nation.136
		10 = colonial_nation.140
		10 = colonial_nation.142
		10 = colonial_nation.144
		10 = colonial_nation.146
		10 = colonial_nation.148
		10 = colonial_nation.150
		10 = colonial_nation.152
		10 = colonial_nation.154
		10 = colonial_nation.156
		10 = colonial_nation.158
		10 = colonial_nation.160
		10 = colonial_nation.162
		10 = colonial_nation.164
		10 = colonial_nation.166
		10 = colonial_nation.168
		10 = colonial_nation.170
		10 = colonial_nation.172
		10 = colonial_nation.174
		10 = colonial_nation.176

		100 = conquest_of_paradise.318
		100 = conquest_of_paradise.320

		# Dutch Republic
		100 = dutch_republic.1
		100 = dutch_republic.2
		100 = dutch_republic.3
		100 = dutch_republic.4
		100 = dutch_republic.5
		100 = dutch_republic.6
		100 = dutch_republic.7
		100 = dutch_republic.8
		100 = dutch_republic.9
		100 = dutch_republic.10
		150 = dutch_republic.11
		100 = dutch_republic.13
		100 = dutch_republic.14
		100 = dutch_republic.15
		100 = dutch_republic.16
		100 = dutch_republic.17
		100 = dutch_republic.18
		100 = dutch_republic.19
		100 = dutch_republic.20
		100 = dutch_republic.21
		100 = dutch_republic.22
		100 = dutch_republic.23
		100 = dutch_republic.24
		100 = dutch_republic.25
		100 = dutch_republic.27
		
		# Republic Factions
		#100 = republic_factions.2
		#100 = republic_factions.5
		#100 = republic_factions.7
		#100 = republic_factions.9
		#100 = republic_factions.10
		#100 = republic_factions.12
		#100 = republic_factions.13
		#100 = republic_factions.14
		#100 = republic_factions.15
		#100 = republic_factions.16
		#100 = republic_factions.17
		#100 = republic_factions.18
		#100 = republic_factions.19
		#100 = republic_factions.20
		#100 = republic_factions.22
		#100 = republic_factions.23
		#100 = republic_factions.24

		# Republican Dictatorship
		100 = republican_dictatorship.1
		100 = republican_dictatorship.2
		100 = republican_dictatorship.3
		100 = republican_dictatorship.4
		100 = republican_dictatorship.5
		100 = republican_dictatorship.6
		100 = republican_dictatorship.7
		100 = republican_dictatorship.8

		# Elective Monarchy
		150 = elective_monarchy.1
		150 = elective_monarchy.2
		25 = elective_monarchy.3
		25 = elective_monarchy.4
		150 = elective_monarchy.6
		150 = elective_monarchy.8
		150 = elective_monarchy.9
		150 = elective_monarchy.10
		150 = elective_monarchy.11
		150 = elective_monarchy.12
		150 = elective_monarchy.14
		150 = elective_monarchy.17
		25 = elective_monarchy.18

		# Free Cities
		25 = free_cities.3
		25 = free_cities.7
		25 = free_cities.8
		25 = free_cities.10
		25 = free_cities.13
		25 = free_cities.17
		25 = free_cities.19
		
		#Empire of China
		100 = china_events.1
		100 = china_events.2
		100 = china_events.3
		100 = china_events.4
		75 = china_events.5
		100 = china_events.6
		100 = china_events.7
		100 = china_events.8
		100 = china_events.9
		100 = china_events.10
		100 = china_events.11
		100 = china_events.12
		100 = china_events.13
		100 = china_events.14
		100 = china_events.15
		100 = china_events.16
		100 = china_events.17
		100 = china_events.18
		100 = china_events.19
		100 = china_events.20
		100 = china_events.21
		100 = china_events.22
		100 = china_events.23
		100 = china_events.24
		100 = china_events.25
		100 = china_events.26
		100 = china_events.27
		100 = china_events.28
		100 = china_events.29
		100 = china_events.30
		100 = china_events.33
		100 = china_events.34
		100 = china_events.35
		100 = china_events.36
		100 = china_events.37
		100 = china_events.38
		100 = china_events.39
		50 = china_events.40
		100 = china_events.41
		100 = china_events.42
		100 = china_events.44
		
		1000 = 0	
	}
}

on_four_year_pulse_2 = {
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {
}

on_five_year_pulse = {

	set_country_flag = initialization_complete # Ensures newly formed nations get the flag

	events = {
		flavor_byz.10025	# Faction boost for militarists if no Justinian Flag
		flavor_rus.21001	# Boost for Tsar power if not 1000
		#vef_trade.10040	#Silk Road Trader
		#vef_trade.10041	#Imperial Merchant
		vef_reformation.2	# Human player option to convert
		seven_cities_events.1000 #Clearing of Seven Cities Hunt when goal is no longer possible
		vef_growth.1		# Growth Mechanic
		vef_autonomy.2		# Calculate autonomy groups
		vef_economy.1		# Check resource modifiers
		vef_newgov.10100	# AI Nomad Development aid
	}
	#random_events = {
	#	# Resource events
	#	#1 = vef_resource.40001 # Copper struck
	#	#1 = vef_resource.40002 # Iron struck
	#	#1 = vef_resource.40003 # Silver struck
	#	#1 = vef_resource.40004 # Gold struck
	#	#1 = vef_resource.40005 # Lead struck
	#	#1 = vef_resource.40006 # Salt struck
	#	#1 = vef_resource.40007 # Gems struck

	#	# Trade Events
	#	#100 = vef_trade.10006
	#	#100 = vef_trade.10021

	#	1000 = 0
	#}
}

# Estates pulse
on_five_year_pulse_2 = {
	random_events = {	
		# Burghers	
#		100 = burghers_estate_events.1
#		100 = burghers_estate_events.2
#		100 = burghers_estate_events.3
#		100 = burghers_estate_events.4
#		100 = burghers_estate_events.5
#		100 = burghers_estate_events.6
#		100 = burghers_estate_events.7
#		100 = burghers_estate_events.8
#		100 = burghers_estate_events.9
#		400 = burghers_estate_events.10 #Demands
#		100 = burghers_estate_events.11 #Bonus
#		100 = burghers_estate_events.12
#		100 = burghers_estate_events.13
#		400 = burghers_estate_events.14 #Demands
#		100 = burghers_estate_events.15 #Disloyal
		# Nobles
#		100 = nobles_estate_events.1 #Demands
#		100 = nobles_estate_events.2
#		100 = nobles_estate_events.3
#		100 = nobles_estate_events.4
#		400 = nobles_estate_events.5 #Demands
#		100 = nobles_estate_events.6
#		100 = nobles_estate_events.7
#		400 = nobles_estate_events.8 #Disloyal
#		400 = nobles_estate_events.9 #Disloyal
#		50 = nobles_estate_events.10
#		100 = nobles_estate_events.11 #Bonus
		# Clergy
#		100 = church_estate_events.1
			#Regional Variations:
#			100 = church_estate_events.101 
#			100 = church_estate_events.102
#			100 = church_estate_events.103
#			100 = church_estate_events.104
#			100 = church_estate_events.105
#		100 = church_estate_events.2
#		100 = church_estate_events.3
#		100 = church_estate_events.4
#		400 = church_estate_events.5 #Disloyal
#		400 = church_estate_events.6 #Demands
#		100 = church_estate_events.7 #Bonus
#		100 = church_estate_events.8
#		100 = church_estate_events.9
#		100 = church_estate_events.10
		# Dhimmi
#		100 = dhimmi_estate_events.1
#		400 = dhimmi_estate_events.2 #Demands
#		100 = dhimmi_estate_events.3
#		100 = dhimmi_estate_events.4
#		100 = dhimmi_estate_events.5
#		100 = dhimmi_estate_events.6
#		400 = dhimmi_estate_events.7 #Disloyal
#		100 = dhimmi_estate_events.8
		# Cossacks
#		100 = cossack_estate_events.1
		#100 = cossack_estate_events.2 (triggers in neighbor country)
#		100 = cossack_estate_events.8
#		100 = cossack_estate_events.9
#		100 = cossack_estate_events.10
#		100 = cossack_estate_events.11
#		400 = cossack_estate_events.12 #Disloyal
#		100 = cossack_estate_events.13
#		400 = cossack_estate_events.14 #Demands
		# Tribes
		100 = tribal_estate_events.1
		100 = tribal_estate_events.2
		100 = tribal_estate_events.3
		100 = tribal_estate_events.4
		100 = tribal_estate_events.5
		100 = tribal_estate_events.6
		100 = tribal_estate_events.7
		100 = tribal_estate_events.8
		100 = tribal_estate_events.9
		150 = tribal_estate_events.11 #Demands
		150 = tribal_estate_events.12 #Demands
		150 = tribal_estate_events.13 #Demands
		150 = tribal_estate_events.14 #Demands
		
		1000 = 0              
	}
}

on_five_year_pulse_3 = {
}

on_five_year_pulse_4 = {
}

# El Dorado
on_explore_coast = {
	random_events = {
		10 = exploration_events.1
		10 = exploration_events.2
		10 = exploration_events.3
		10 = exploration_events.4
		10 = exploration_events.5
		10 = exploration_events.6
		10 = exploration_events.7
		10 = exploration_events.8
		10 = exploration_events.9
		10 = exploration_events.10
		10 = exploration_events.11
		10 = exploration_events.12
		10 = exploration_events.13
		10 = exploration_events.14
		10 = exploration_events.15
	}
}
on_conquistador_empty = {
	random_events = {
		10 = seven_cities_events.1
		10 = seven_cities_events.2
		10 = seven_cities_events.3
		10 = seven_cities_events.4
		10 = seven_cities_events.5
		10 = seven_cities_events.6
		10 = seven_cities_events.7
		10 = seven_cities_events.8
		
		10 = seven_cities_events.100
		10 = seven_cities_events.101
		10 = seven_cities_events.102
		10 = seven_cities_events.103
		10 = seven_cities_events.104
		10 = seven_cities_events.105
		
		50 = seven_cities_events.200
		50 = seven_cities_events.201
		50 = seven_cities_events.202
		50 = seven_cities_events.203
		50 = seven_cities_events.204
		50 = seven_cities_events.205
		50 = seven_cities_events.206
		50 = seven_cities_events.207
		50 = seven_cities_events.208
		50 = seven_cities_events.209
		50 = seven_cities_events.210
		50 = seven_cities_events.211
		50 = seven_cities_events.212
		50 = seven_cities_events.213
		50 = seven_cities_events.214
		50 = seven_cities_events.215
		50 = seven_cities_events.216
		50 = seven_cities_events.217
		50 = seven_cities_events.218
		50 = seven_cities_events.219
		50 = seven_cities_events.220
		50 = seven_cities_events.221
		50 = seven_cities_events.222
		50 = seven_cities_events.223
		
		10 = seven_cities_events.302
		10 = seven_cities_events.303
		10 = seven_cities_events.308
		10 = seven_cities_events.309
		
		10 = seven_cities_events.400
		10 = seven_cities_events.401
		10 = seven_cities_events.402
		10 = seven_cities_events.405
		10 = seven_cities_events.406
		10 = seven_cities_events.407
		10 = seven_cities_events.408
		10 = seven_cities_events.409
		10 = seven_cities_events.410
		10 = seven_cities_events.413
		10 = seven_cities_events.414
		
		1000 = 0
	}
}

on_conquistador_native = {
	random_events = {
		10 = seven_cities_events.300
		10 = seven_cities_events.301
		10 = seven_cities_events.303
		10 = seven_cities_events.304
		10 = seven_cities_events.305
		10 = seven_cities_events.306
		10 = seven_cities_events.307
		10 = seven_cities_events.308
		10 = seven_cities_events.309
		10 = seven_cities_events.310
		
		190 = 0
	}
}

on_buy_religious_reform = {
	events = {
		religious_reforms.1
		religious_reforms.2
		religious_reforms.3
	}
}

on_circumnavigation = {
	events = {
		exploration_events.17
		exploration_events.16 #First Circumnavigation Europe
	}
}

on_become_free_city = {
	events = {
		free_cities.1
	}
}

on_remove_free_city = {
	events = {
		free_cities.2
	}
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
}

on_revoke_estate_land = {
#	if = {
#		limit = {
#			has_estate = estate_cossacks
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_cossacks
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = cossack_rebels
#			size = 1
#		}
#		province_event = { id = cossack_estate_events.15 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_dhimmi
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_dhimmi
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = religious_rebels
#			size = 1
#		}
#		province_event = { id = dhimmi_estate_events.9 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_church
#			has_owner_religion = yes
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_church
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = religious_rebels
#			size = 1
#		}
#		province_event = { id = church_estate_events.11 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_church
#			has_owner_religion = no
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_church
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = particularist_rebels
#			size = 1
#		}
#		province_event = { id = church_estate_events.11 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_nobles
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_nobles
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = noble_rebels
#			size = 1
#		}
#		province_event = { id = nobles_estate_events.12 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_burghers
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_burghers
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = particularist_rebels
#			size = 1
#		}
#		province_event = { id = burghers_estate_events.16 }
#	}
	if = {
		limit = {
			has_estate = estate_nomadic_tribes
			owner = {
				NOT = {
					estate_loyalty = {
						estate = estate_nomadic_tribes
						loyalty = 40
					}
				}
			}
		}
		spawn_rebels = {
			type = tribal_rebels
			size = 1
		}
		province_event = { id = tribal_estate_events.10 }
	}
}

on_grant_estate_land = {
}

on_death_has_harem = {
	if = {
		limit = {
			has_heir = no
		}
		country_event = { id = harem_events.2 }
	}
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
	country_event = { id = fetishist_flavor.302 days = 10 } #removing tomb if incompatible cult is picked
	country_event = { id = fetishist_flavor.304 days = 10 } #rebuilding tomb if lost
	if = {
		limit = {
			has_country_flag = lost_ancestral_lands
			NOT = { has_adopted_cult = zanahary_cult }
			NOT = { has_adopted_cult = central_african_ancestor_cult }
		}
		clr_country_flag = lost_ancestral_lands
	}
}

# country
on_gain_great_power_status = {
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
}

# province
on_province_religion_converted = {
}

# province
on_province_culture_converted = {
}

# province
# FROM = old owner
on_province_owner_change = {
	events = {
		japan.1
		vef_dynamism.10
	}
	if = {
		limit = { FROM = { government = tribal }}
		add_nationalism = -30
	}
	if = {
		limit = {
			owned_by = BYZ
			is_core = BYZ
			religion = orthodox
			culture = greek
			BYZ = {
				OR = {
					has_country_modifier = byzantine_decline1
					has_country_modifier = byzantine_decline2
				}
			}
		}
		BYZ = { change_variable = { which = previous_count value = 1 }}
	}
	#Catch newly colonised provinces that transfer instantly to an already formed colonial nation
	if = {
		limit = { has_province_flag = libbuild_initialise is_colony = no }
		owner = { change_variable = { which = previous_count value = 1 }}	#Prevent stab hit
		province_event = { id = vef_libbuild.1000 }
	}
	if = {
		limit = { is_empty = yes }
		province_event = { id = vef_colonial.110 }
	}
	clr_province_flag = autonomy_group_one
	clr_province_flag = autonomy_group_two
	clr_province_flag = autonomy_group_three
	clr_province_flag = autonomy_group_four
	set_province_flag = autonomy_group_five
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

# country
on_harmonized_pagan = {
	events = {
		confucian_events.1
	}
}
on_harmonized_christian = {
	events = {
		confucian_events.2
	}
}
on_harmonized_muslim = {
	events = {
		confucian_events.3
	}
}
on_harmonized_semitic_group = {
	events = {
		confucian_events.5
	}
}
on_harmonized_dualism = {
	events = {
		confucian_events.6
	}
}
on_harmonized_dharmic = {
	events = {
		confucian_events.4
	}
}
on_harmonized_mahayana = {
	events = {
		confucian_events.9
	}
}
on_harmonized_buddhism = { #Theravada
	events = {
		confucian_events.8
	}	
}
on_harmonized_shinto = {
	events = {
		confucian_events.7
	}
}
on_harmonized_vajrayana = {
	events = {
		confucian_events.10
	}
}

# country
on_russian_sudebnik = {

}

# country
on_russian_oprichnina = {

}

# country
on_russian_streltsy = {

}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
	add_army_professionalism = 0.01
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {
	
}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	FROM = {
		add_army_professionalism = -0.0015
	}
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
		remove_province_modifier = pasha_removed_modifier
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
	}
}

# THIS = Province
on_janissaries_raised = {
	
}

on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {

}

on_center_of_trade_downgrade = {

}

on_culture_promoted = {

}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
	if = {
		limit = {
			OR = {
				region = bengal_region
				region = hindusthan_region
				region = west_india_region
				region = deccan_region
				region = coromandel_region
			}
		}
		ROOT = {
			owner = {
				set_country_flag = the_coin_is_stronger_than_the_sword
			}
		}
	}
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	events = {
		dutch_republic.31 # States General falls under a PU
	}
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	
}

on_create_vassal = {
	
}
